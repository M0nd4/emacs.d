* Emacs Org Configuration

  This file is tangled using =org-babel-load-file=. What this does is
  generate a =emacs-init.el= from the =emacs-lisp= source blocks.

  This emacs.d is currently  designed for Emacs 24.3 and above.

*** Credits:
    This emacs.d was heavily inspired by the following configurations.

* Package Management

  [[https://github.com/rdallasgray/pallet][Pallet]] is a very helpful package management tool for Emacs.  It
  utilizes a dependency management platform called [[https://github.com/cask/cask][Cask]], to update a
  centralized =Cask= file when you install or remove packages.

** Cask
   Cask is initialized in =init.el= with the following:
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
   #+END_SRC

** Pallet
   You can download all packages in your =Cask= file by using =M-x
   pallet-install=.  However, this should not be necessary.
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'pallet)
   #+END_SRC

* Packages, Modes, and Extensions

** Dependency Management with =req-package=

   Where Pallet keeps track of the packages we have installed, =req-package=
   handles all our internal package dependencies and configurations.

   Another nice thing about =req-package=, is that you no longer not
   need to specify the =:ensure= keyword, as it is added by default.

   Start using =req-package=
   #+BEGIN_SRC emacs-lisp
     (require 'req-package)
   #+END_SRC

* Essentials

Some quick essential customizations.

#+BEGIN_SRC emacs-lisp
  ;; Turn off mouse interface early in startup to avoid momentary display
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (defvar savefile-dir (expand-file-name "savefile" user-emacs-directory)
    "This folder stores all the automatically generated save/history-files.")

  (unless (file-exists-p savefile-dir)
    (make-directory savefile-dir))

  ;; Add the personal packages directory to the load-path
  (add-to-list 'load-path (concat user-emacs-directory "packages/"))

  ;; Start off with some sanity.
  (require 'better-defaults)

  ;; Load elisp bits collected from everywhere
  (require 'elisp)

  ;; OSX specific settings
  (when (eq system-type 'darwin)
    (require 'cocoa-emacs-default))

  ;; No splash screen please
  (setq inhibit-startup-screen t)

  ;; Keep emacs Custom-settings in separate file
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))

  ;; saveplace remembers your location in a file when saving files
  (require 'saveplace)
  (setq save-place-file (expand-file-name "saveplace" savefile-dir))
  ;; activate it for all buffers
  (setq-default save-place t)

  ;; savehist keeps track of some history
  (require 'savehist)
  (setq savehist-additional-variables
        ;; search entries
        '(search ring regexp-search-ring)
        ;; save every minute
        savehist-autosave-interval 60
        ;; keep the home clean
        savehist-file (expand-file-name "savehist" savefile-dir))
  (savehist-mode +1)

  ;; enable narrowing commands
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)

  ;; enabled change region case commands
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  ;; enable erase-buffer command
  (put 'erase-buffer 'disabled nil)
#+END_SRC

* Appearance
** Theme

Set custom theme path and load theme
#+BEGIN_SRC emacs-lisp
  (req-package zenburn-theme
    :init
    (load-theme 'zenburn t))
#+END_SRC

** Mode Line

#+BEGIN_SRC emacs-lisp
  (req-package smart-mode-line
    :config
    (progn
      (setq sml/theme 'dark)
      (sml/setup)))
#+END_SRC

* Keybindings

** Exiting
I don't like to quite Emacs on accident, and I find closing frames are
more useful.

#+BEGIN_SRC emacs-lisp
  ;; The mnemonic is C-t REALLY QUIT
  (bind-key "C-x r q" 'save-buffers-kill-terminal)
  (bind-key "C-x C-c" 'delete-frame)
#+END_SRC

** Improvements
#+BEGIN_SRC emacs-lisp
  ;; convenient line number showing
  (global-set-key [remap goto-line] 'goto-line-with-feedback)

  (bind-key "M-/" 'hippie-expand)
  (bind-key "C-s" 'isearch-forward-regexp)
  (bind-key "C-r" 'isearch-backward-regexp)
  (bind-key "C-M-s" 'isearch-forward)
  (bind-key "C-M-r" 'isearch-backward)
#+END_SRC

** Key-chord

#+BEGIN_SRC emacs-lisp
  (req-package key-chord
    :init
    (key-chord-mode +1)
    :config
    (progn
      (setq key-chord-two-keys-delay 0.05)
      (key-chord-define-global "jl" 'ace-jump-line-mode)
      (key-chord-define-global "JJ" 'prelude-switch-to-previous-buffer)
      (key-chord-define-global "x1" 'delete-other-windows)
      (key-chord-define-global "xk" 'switch-window)
      (key-chord-define-global "0o" 'delete-window)
      (key-chord-define-global "xn" 'helm-mini)
      (key-chord-define-global "jk" 'magit-status)
      (key-chord-define-global "jh" 'ace-jump-word-mode)
      (key-chord-define-global "xl" 'kill-this-buffer)
      (key-chord-define-global "xm" 'helm-M-x)))
#+END_SRC

** Unbind keys

#+BEGIN_SRC emacs-lisp
  (unbind-key "C-o")
  (unbind-key "C-x f")
#+END_SRC
* Finish Requirements
All done with  =req-package=.
#+BEGIN_SRC emacs-lisp
(req-package-finish)
#+END_SRC
