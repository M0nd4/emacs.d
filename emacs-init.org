* Emacs Org Configuration

  This file is tangled using =org-babel-load-file=. What this does is
  generate a =emacs-init.el= from the =emacs-lisp= source blocks.

  This emacs.d is currently  designed for Emacs 24.3 and above.

*** Credits:
    This emacs.d was heavily inspired by the following configurations.

    [[https://github.com/daschwa/dotfiles/tree/master/emacs.d][daschwa's emacs.d]]

* Package Management

  [[https://github.com/rdallasgray/pallet][Pallet]] is a very helpful package management tool for Emacs.  It
  utilizes a dependency management platform called [[https://github.com/cask/cask][Cask]], to update a
  centralized =Cask= file when you install or remove packages.

** Cask
   Cask is initialized in =init.el= with the following:
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
   #+END_SRC

** Pallet
   You can download all packages in your =Cask= file by using =M-x
   pallet-install=.  However, this should not be necessary.
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'pallet)
   #+END_SRC

* Packages, Modes, and Extensions

** Dependency Management with =req-package=

   Where Pallet keeps track of the packages we have installed, =req-package=
   handles all our internal package dependencies and configurations.

   Another nice thing about =req-package=, is that you no longer not
   need to specify the =:ensure= keyword, as it is added by default.

   Start using =req-package=
   #+BEGIN_SRC emacs-lisp
     (require 'req-package)
   #+END_SRC

* Essentials

Some quick essential customizations.

#+BEGIN_SRC emacs-lisp
  ;; Turn off mouse interface early in startup to avoid momentary display
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (defvar savefile-dir (expand-file-name "savefile" user-emacs-directory)
    "This folder stores all the automatically generated save/history-files.")

  (unless (file-exists-p savefile-dir)
    (make-directory savefile-dir))

  ;; Add the personal packages directory to the load-path
  (add-to-list 'load-path (concat user-emacs-directory "packages/"))

  ;; Load elisp bits collected from everywhere
  (require 'elisp)

  ;; Start off with some sanity.
  (require 'better-defaults)

  ;; OSX specific settings
  (when (eq system-type 'darwin)
    (require 'cocoa-emacs-default))

  ;; No splash screen please
  (setq inhibit-startup-screen t)

  ;; Keep emacs Custom-settings in separate file
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))

  ;; saveplace remembers your location in a file when saving files
  (require 'saveplace)
  (setq save-place-file (expand-file-name "saveplace" savefile-dir))
  ;; activate it for all buffers
  (setq-default save-place t)

  ;; savehist keeps track of some history
  (require 'savehist)
  (setq savehist-additional-variables
        ;; search entries
        '(search ring regexp-search-ring)
        ;; save every minute
        savehist-autosave-interval 60
        ;; keep the home clean
        savehist-file (expand-file-name "savehist" savefile-dir))
  (savehist-mode +1)

  ;; enable narrowing commands
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)

  ;; enabled change region case commands
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  ;; enable erase-buffer command
  (put 'erase-buffer 'disabled nil)
#+END_SRC

* Appearance
** Theme

Set custom theme path and load theme
#+BEGIN_SRC emacs-lisp
  (req-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC

** Mode Line

#+BEGIN_SRC emacs-lisp
  (req-package smart-mode-line
    :config
    (progn
      (setq sml/theme 'dark)
      (sml/setup)))
#+END_SRC

* Keybindings

** Exiting
I don't like to quite Emacs on accident, and I find closing frames are
more useful.

#+BEGIN_SRC emacs-lisp
  ;; The mnemonic is C-t REALLY QUIT
  (bind-key "C-x r q" 'save-buffers-kill-terminal)
  (bind-key "C-x C-c" 'delete-frame)
#+END_SRC

** Improvements
#+BEGIN_SRC emacs-lisp
  ;; convenient line number showing
  (global-set-key [remap goto-line] 'goto-line-with-feedback)

  ;; From better defaults
  (bind-key "M-/" 'hippie-expand)
  (bind-key "C-s" 'isearch-forward-regexp)
  (bind-key "C-r" 'isearch-backward-regexp)
  (bind-key "C-M-s" 'isearch-forward)
  (bind-key "C-M-r" 'isearch-backward)
  (bind-key "C-x C-b" 'ibuffer)
  (bind-key "C-:" 'eval-expression)
  (bind-key "M-SPC" 'cycle-spacing)
  (bind-key "C-c x" 'sunrise-cd)
  (bind-key "C-c X" 'sunrise)
  (bind-key "C-c t" 'toggle-window-split)
  (bind-key "C-S-l" 'package-list-packages)
  (bind-key "C-c q" 'auto-fill-mode)
  (bind-key "M-'" 'next-error)

  ;; Set Regexp Alignment
  (bind-key "C-x \\" 'align-regexp)

  ;; Font size
  (bind-key "C-+" 'text-scale-increase)
  (bind-key "C--" 'text-scale-decrease)

  ;; Indentation help
  (bind-key "C-^" 'prelude-top-join-line)

  ;; A complementary binding to the apropos-command (C-h a)
  (define-key 'help-command "A" 'apropos)

  (bind-key "C-h C-f" 'find-function)
  (bind-key "C-h C-k" 'find-function-on-key)
  (bind-key "C-h C-v" 'find-variable)
  (bind-key "C-h C-l" 'find-library)

  (global-set-key [remap kill-whole-line] 'prelude-kill-whole-line)
  (global-set-key [remap move-beginning-of-line]
                  'prelude-move-beginning-of-line)

  ;; Activate occur easily inside isearch
  (define-key isearch-mode-map (kbd "C-o")
    (lambda () (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp
                   isearch-string
                 (regexp-quote isearch-string))))))
#+END_SRC

** Key-chord

Key-chord maps pairs of simultaneously pressed keys to commands.

#+BEGIN_SRC emacs-lisp
  (req-package key-chord
    :config
    (progn
      (key-chord-mode +1)
      (setq key-chord-two-keys-delay 0.05)
      (key-chord-define-global "jl" 'ace-jump-line-mode)
      (key-chord-define-global "JJ" 'prelude-switch-to-previous-buffer)
      (key-chord-define-global "x1" 'delete-other-windows)
      (key-chord-define-global "xk" 'switch-window)
      (key-chord-define-global "0o" 'delete-window)
      (key-chord-define-global "xn" 'helm-mini)
      (key-chord-define-global "jk" 'magit-status)
      (key-chord-define-global "jh" 'ace-jump-word-mode)
      (key-chord-define-global "xl" 'kill-this-buffer)
      (key-chord-define-global "xm" 'helm-M-x)))
#+END_SRC

** Unbind keys

#+BEGIN_SRC emacs-lisp
  (unbind-key "C-o")
  (unbind-key "C-x f")
#+END_SRC
* Setups

  All packages and modes are configured here.

** Major Modes

*** Magit

[[https://github.com/magit/magit][Magit]] is the ultimate =git= interface for Emacs.

#+BEGIN_SRC emacs-lisp
  (req-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

*** Lisp

#+BEGIN_SRC emacs-lisp
  ;; a great lisp coding hook
  (defun prelude-lisp-coding-defaults ()
    ;; (smartparens-strict-mode +1)
    (rainbow-delimiters-mode +1)
    (turn-on-prettify-symbols-mode))

  (setq prelude-lisp-coding-hook 'prelude-lisp-coding-defaults)

  ;; interactive modes don't need whitespace checks
  (defun prelude-interactive-lisp-coding-defaults ()
    ;; (smartparens-strict-mode +1)
    (rainbow-delimiters-mode +1)
    (whitespace-mode -1))

  (setq prelude-interactive-lisp-coding-hook 'prelude-interactive-lisp-coding-defaults)
#+END_SRC

**** Emacs lisp

#+BEGIN_SRC emacs-lisp
  (req-package elisp-slime-nav
    :diminish (elisp-slime-nav-mode . ""))
  (req-package rainbow-delimiters)
  (req-package eldoc
    :diminish (eldoc-mode . ""))
  
  (defun prelude-recompile-elc-on-save ()
    "Recompile your elc when saving an elisp file."
    (add-hook 'after-save-hook
              (lambda ()
                (when (file-exists-p (byte-compile-dest-file buffer-file-name))
                  (emacs-lisp-byte-compile)))
              nil
              t))
  
  (defun prelude-conditional-emacs-lisp-checker ()
    "Don't check doc style in Emacs Lisp test files."
    (let ((file-name (buffer-file-name)))
      (when (and file-name (string-match-p ".*-tests?\\.el\\'" file-name))
        (setq-local flycheck-checkers '(emacs-lisp)))))
  
  (defun prelude-emacs-lisp-mode-defaults ()
    "Sensible defaults for `emacs-lisp-mode'."
    (run-hooks 'prelude-lisp-coding-hook)
    (turn-on-eldoc-mode)
    (prelude-recompile-elc-on-save)
    (rainbow-mode +1)
    (setq mode-name "EL")
    (add-hook 'eval-expression-minibuffer-setup-hook 'eldoc-mode)
    (prelude-conditional-emacs-lisp-checker))
  
  (setq prelude-emacs-lisp-mode-hook 'prelude-emacs-lisp-mode-defaults)
  
  (add-hook 'emacs-lisp-mode-hook (lambda ()
                                    (run-hooks 'prelude-emacs-lisp-mode-hook)))
  
  (add-to-list 'auto-mode-alist '("Cask\\'" . emacs-lisp-mode))
  
  ;; ielm is an interactive Emacs Lisp shell
  (defun prelude-ielm-mode-defaults ()
    "Sensible defaults for `ielm'."
    (run-hooks 'prelude-interactive-lisp-coding-hook)
    (turn-on-eldoc-mode))
  
  (setq prelude-ielm-mode-hook 'prelude-ielm-mode-defaults)
  
  (add-hook 'ielm-mode-hook (lambda ()
                              (run-hooks 'prelude-ielm-mode-hook)))
  
  ;; enable elisp-slime-nav-mode
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'elisp-slime-nav-mode))
  
#+END_SRC

** Minor Modes

*** Helm

=helm-mini= is a part of [[https://github.com/emacs-helm/helm][Helm]] that shows current buffers and a list of
recent files using =recentf=.  It is a great way to manage many open
files.

#+BEGIN_SRC emacs-lisp
  (req-package helm-config
    :require helm)
#+END_SRC

*** Fulframe

[[https://github.com/tomterl/fullframe][Fullframe]] advises commands to execute fullscreen, restoring the window
setup when exiting.

#+BEGIN_SRC emacs-lisp
  (req-package fullframe
    :config
    (progn
      (fullframe magit-status magit-mode-quit-window)
      (fullframe ibuffer ibuffer-quit)))
#+END_SRC

*** Mykie

[[https://github.com/yuutayamada/mykie-el][Mykie]] is a command multiplexer, which can add other functions to a
single keybind.

#+BEGIN_SRC emacs-lisp
  (req-package mykie
    :config
    (progn
      (setq mykie:use-major-mode-key-override 'global)
      (mykie:initialize)
      (mykie:set-keys nil
        "C-e"
        :default (move-end-of-line 1)
        :repeat  (end-of-buffer)
        :C-u (beginning-of-buffer)
        "C-S-n"
        :default (next-line 4)
        "C-S-p"
        :default (previous-line 4)
        "C-w"
        :default (kill-region (mark) (point))
        :minibuff (backward-kill-word 1))))
#+END_SRC

*** Switch-window

[[https://github.com/dimitri/switch-win][Switch-window]] provides window switching, the visual way.

#+BEGIN_SRC emacs-lisp
  (req-package switch-window
    :bind ("C-x o" . switch-window))
#+END_SRC

*** Diminish

Move to setups for diminish and use =req-package= Removes minor modes
from the mode line.  Can get back with =M-x RET diminish-undo=
=diminish= is integrated with =req-package=.

#+BEGIN_SRC emacs-lisp
  (req-package diminish)
#+END_SRC

*** Rainbow mode

=rainbow-mode= displays hexadecimal colors with the color they
represent as their background.

#+BEGIN_SRC emacs-lisp
  (req-package rainbow-mode
    :diminish (rainbow-mode . ""))
#+END_SRC

* Finish Requirements
All done with  =req-package=.
#+BEGIN_SRC emacs-lisp
(req-package-finish)
#+END_SRC
