#+AUTHOR: Jeremy Bi
#+TITLE: My Emacs Configuration

* Emacs Org Configuration

This file is tangled using =org-babel-load-file=. What this does is
generate a =emacs-init.el= from the =emacs-lisp= source blocks.

This emacs.d is currently designed for [[https://github.com/railwaycat/emacs-mac-port][Emacs Mac Port]].

*** Credits:

This emacs.d was heavily inspired by the following configurations.

[[https://github.com/daschwa/dotfiles/tree/master/emacs.d][Adam Schwartz's emacs.d]]

[[https://github.com/bbatsov/prelude][Bozhidar Batsov's prelude]]

[[https://github.com/larstvei/dot-emacs][larstvei's dot-emacs]]

* Package Management

[[https://github.com/rdallasgray/pallet][Pallet]] is a very helpful package management tool for Emacs.  It
utilizes a dependency management platform called [[https://github.com/cask/cask][Cask]], to update a
centralized =Cask= file when you install or remove packages.

** Cask

Cask is initialized in =init.el= with the following:
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
#+END_SRC

** Pallet

You can download all packages in your =Cask= file by using =M-x
pallet-install=. However, this should not be necessary.
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'pallet)
  (pallet-mode t)
#+END_SRC

* Packages, Modes, and Extensions

** Dependency Management with =use-package=

Where Pallet keeps track of the packages we have installed,
=use-package= handles all our internal package dependencies and
configurations.

Start using =use-package=
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'use-package)
#+END_SRC
* Meta

We add a function to the =after-save-hook= ensuring to always tangle
and byte-compile the =org=-document after changes asynchronously.

[[https://github.com/jwiegley/emacs-async][async]] is a module for doing asynchronous processing in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package async
    :ensure t
    :config
    (require 'dired-async)
    (defun my/init-hook ()
      "If the current buffer is 'emacs-init.org' the code-blocks
  are tangled, and the tangled file is compiled."
      (when (equal (buffer-file-name) my-org-file)
        (async-start
         `(lambda ()
            (require 'org)
            (org-babel-tangle-file ,my-org-file)
            (byte-compile-file ,my-init-file))
         (lambda (result)
           (message "Tangled file compiled.")))))
    (add-hook 'after-save-hook 'my/init-hook))
#+END_SRC

* Appearance

** Theme

Set custom theme path and load theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))
#+END_SRC

** Mode Line

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smart-mode-line
    :ensure t
    :init
    (setq sml/no-confirm-load-theme t)
    :config
    (sml/setup))
#+END_SRC

* Keybindings

** Improvements
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elisp
    :load-path "packages/"
    :bind (([remap goto-line] . goto-line-with-feedback)
           ("M-/" . hippie-expand)
           ("C-x C-b" . ibuffer)
           ("C-:" . eval-expression)
           ("M-SPC" . cycle-spacing)
           ("s-k" . kill-this-buffer)
           ("C-c k" . prelude-kill-other-buffers)
           ("C-c n" . prelude-cleanup-buffer-or-region)
           ("C-c d" . duplicate-comment-current-line-or-region)
           ("C-x b" . prelude-switch-to-previous-buffer)
           ("C-^" . prelude-top-join-line)
           ("C-x \\" . align-regexp)
           ("C-S-n" . my/forward-line-by-many)
           ("C-S-p" . my/backward-line-by-many)
           ([remap kill-whole-line] . prelude-kill-whole-line)
           ([(control shift return)] . prelude-smart-open-line-above))
    :bind* (("C-M-h" . backward-kill-word)))

  ;; (bind-key "C-f" 'find-function 'help-command)
  ;; (bind-key "C-k" 'find-function-on-key 'help-command)
  ;; (bind-key "C-v" 'find-variable 'help-command)
  ;; (bind-key "C-l" 'find-library 'help-command)

#+END_SRC

** Key-chord

Key-chord maps pairs of simultaneously pressed keys to commands.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package key-chord
    :ensure t
    :config
    (setq key-chord-two-keys-delay 0.05)
    (key-chord-define-global "x1" 'delete-other-windows)
    (key-chord-define-global "xk" 'ace-window)
    (key-chord-define-global "0o" 'delete-window)
    (key-chord-define-global "xn" 'helm-mini)
    (key-chord-define-global "jk" 'magit-status)
    (key-chord-define-global "xm" 'helm-M-x)
    (key-chord-define-global "1q" "!")
    (key-chord-define-global "2w" "@")
    (key-chord-define-global "3e" "#")
    (key-chord-define-global "4r" "$")
    (key-chord-define-global "5t" "%")
    (key-chord-define-global "6y" "^")
    (key-chord-define-global "7y" "&")
    (key-chord-define-global "8u" "*")
    (key-chord-define-global "9i" "(")
    (key-chord-define-global "-p" "_")
    (key-chord-mode +1))
#+END_SRC

** Unbind keys

#+BEGIN_SRC emacs-lisp :tangle yes
  (unbind-key "C-o")
  (unbind-key "C-x f")
#+END_SRC

* Essentials

Some quick essential customizations.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Turn off mouse interface early in startup to avoid momentary display
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  (unless (file-exists-p savefile-dir)
    (make-directory savefile-dir))

  ;; Start off with some sanity.
  (require 'better-defaults)

  ;; OSX specific settings
  (when (eq system-type 'darwin)
    (require 'cocoa-emacs-default))

  ;; Store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; saveplace remembers your location in a file when saving files
  (require 'saveplace)
  (setq save-place-file (expand-file-name "saveplace" savefile-dir))
  ;; activate it for all buffers
  (setq-default save-place t)

  ;; savehist keeps track of some history
  (require 'savehist)
  (setq savehist-additional-variables
        ;; search entries
        '(search ring regexp-search-ring)
        ;; save every minute
        savehist-autosave-interval 60
        ;; keep the home clean
        savehist-file (expand-file-name "savehist" savefile-dir))
  (savehist-mode +1)

  ;; save recent files
  (require 'recentf)
  (setq recentf-save-file (expand-file-name "recentf" savefile-dir)
        recentf-max-saved-items 500
        recentf-max-menu-items 15)

  ;; reduce the frequency of garbage collection by making it happen on
  (setq gc-cons-threshold (* 1024 1024 20))

  ;; warn when opening files bigger than 100MB
  (setq large-file-warning-threshold 100000000)

  ;; autopair
  ;; (electric-pair-mode)

  ;; enable narrowing commands
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)

  ;; enabled change region case commands
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  ;; enable erase-buffer command
  (put 'erase-buffer 'disabled nil)

  (show-paren-mode 1)
#+END_SRC

* Setups

All packages and modes are configured here.
** Major Modes
*** Lisp

**** Clojure

#+begin_src emacs-lisp :tangle yes
  (use-package clojure-mode
    :ensure t
    :config
    (defun my/clojure-mode-defaults ()
      (subword-mode +1)
      (smartparens-mode -1))
    (add-hook 'clojure-mode-hook 'my/clojure-mode-defaults))
#+end_src

**** Emacs lisp

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/recompile-elc-on-save ()
    "Recompile your elc when saving an elisp file."
    (add-hook 'after-save-hook
              (lambda ()
                (when (file-exists-p (byte-compile-dest-file buffer-file-name))
                  (emacs-lisp-byte-compile)))
              nil
              t))

  (defun my/conditional-emacs-lisp-checker ()
    "Don't check doc style in Emacs Lisp test files."
    (let ((file-name (buffer-file-name)))
      (when (and file-name (string-match-p ".*-tests?\\.el\\'" file-name))
        (setq-local flycheck-checkers '(emacs-lisp)))))

  (defun my/emacs-lisp-mode-defaults ()
    "Sensible defaults for `emacs-lisp-mode'."
    (my/recompile-elc-on-save)
    (smartparens-mode -1)
    (my/conditional-emacs-lisp-checker))

  (add-hook 'emacs-lisp-mode-hook 'my/emacs-lisp-mode-defaults)

  ;; ielm is an interactive Emacs Lisp shell
  (defun my/ielm-mode-defaults ()
    "Sensible defaults for `ielm'."
    (whitespace-mode -1))

  (add-hook 'ielm-mode-hook 'my/ielm-mode-defaults)

  (add-to-list 'auto-mode-alist '("Cask\\'" . emacs-lisp-mode))

  (define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-defun)
  (define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer)

#+END_SRC

*** Geiser/Scheme

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package geiser
  ;;   :config
  ;;   (setq geiser-active-implementations '(racket)))

  (use-package racket-mode
    :ensure t
    :config
    (add-hook 'racket-mode-hook
              '(lambda ()
                 (define-key racket-mode-map (kbd "C-c C-l") 'racket-run)
                 (define-key racket-mode-map (kbd "C-c C-k") 'racket-test))))

  (defun my/scheme-mode-defaults ()
    (smartparens-mode -1))

  (add-hook 'scheme-mode-hook #'my/scheme-mode-defaults)
#+END_SRC

*** LaTex

Sane setup for LaTeX writers.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex-site
    :ensure auctex
    :config
    (defun my/latex-mode-defaults ()
      (turn-on-auto-fill)
      (abbrev-mode 1)
      (LaTeX-math-mode 1)
      (turn-on-cdlatex))

    (add-hook 'LaTeX-mode-hook 'my/latex-mode-defaults)

    (setq TeX-auto-save t)
    (setq TeX-parse-self t)

    ;; (setq-default TeX-master nil)

    (setq TeX-PDF-mode t)

    (when (eq system-type 'darwin)
      (setq TeX-view-program-selection
            '((output-dvi "DVI Viewer")
              (output-pdf "PDF Viewer")
              (output-html "HTML Viewer")))

      (setq TeX-view-program-list
            '(("DVI Viewer" "open %o")
              ("PDF Viewer" "open %o")
              ("HTML Viewer" "open %o"))))

    ;; (eval-after-load "tex"
    ;;   '(add-to-list 'TeX-engine-alist-builtin
    ;;                '(xetex "XeTeX" "xetex -shell-escape" "xelatex -shell-escape" "xetex")))
    )
#+END_SRC

**** Latex extra

#+begin_src emacs-lisp :tangle no
  (use-package latex-extra
    :config
    (eval-after-load 'latex '(latex/setup-keybinds)))
#+end_src

*** Org Mode

If you are not using it, you need to start.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :defer t
    :config
    (require 'ox-md)
    (require 'ox-latex)

    (defun my/org-mode-defaults ()
      (turn-on-org-cdlatex)
      (diminish 'org-cdlatex-mode "")
      (turn-on-auto-fill))

    (add-hook 'org-mode-hook 'my/org-mode-defaults)

    ;; Fontify org-mode code blocks
    (setq org-src-fontify-natively t)

    (setq org-todo-keyword-faces
          '(("TODO" . (:foreground "green" :weight bold))
            ("NEXT" :foreground "blue" :weight bold)
            ("WAITING" :foreground "orange" :weight bold)
            ("HOLD" :foreground "magenta" :weight bold)
            ("CANCELLED" :foreground "forest green" :weight bold)))

    (setq org-enforce-todo-dependencies t)
    (setq org-src-tab-acts-natively t)

    ;; set up latex
    (setq org-latex-create-formula-image-program 'imagemagick)

    (setq org-latex-pdf-process
          (quote ("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
                  "bibtex $(basename %b)"
                  "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
                  "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f")))

    ;; Tell the latex export to use the minted package for source
    ;; code coloration.
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)

    (setq org-latex-minted-options
          '(("frame" "lines") ("framesep" "6pt")
            ("mathescape" "true") ("fontsize" "\\small")))

    (setq org-confirm-babel-evaluate nil)

    ;; execute external programs.
    (org-babel-do-load-languages
     (quote org-babel-load-languages)
     (quote ((emacs-lisp . t)
             (dot . t)
             (ditaa . t)
             (R . t)
             (python . t)
             (ruby . t)
             (gnuplot . t)
             (clojure . t)
             (sh . t)
             (haskell . t)
             (octave . t)
             (org . t)
             (plantuml . t)
             (scala . t)
             (sql . t)
             (latex . t))))

    (eval-after-load 'org-src
      '(define-key org-src-mode-map
         "\C-x\C-s" #'org-edit-src-exit))

    ;; (org-require 'org-ref)
    ;; (setq org-ref-default-bibliography '("/Users/jeremybi/research/refs.bib")
    ;;       org-ref-pdf-directory "/Users/jeremybi/research/papers/"
    ;;       org-ref-bibliography-notes "/Users/jeremybi/research/notes.org")
    )
#+END_SRC

[[https://github.com/jkitchin/jmax/blob/master/org-ref.org][Org-ref]] is an emacs-lisp module to handle bibliographic citations, and
references to figures, tables and sections in org-mode.

*** Dired and dired+

Dired Plus is an extension to the =dired= file manager in Emacs.  My
favorite feature is that pressing =F= will open all marked files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired
    :commands dired-jump
    :config
    (put 'dired-find-alternate-file 'disabled nil)

    ;; always delete and copy recursively
    (setq dired-recursive-deletes 'always)
    (setq dired-recursive-copies 'always)
    ;; show readable size
    (setq dired-listing-switches "-alh")

    (setq dired-dwim-target t)

    ;; enable some really cool extensions like C-x C-j(dired-jump)
    (require 'dired-x)

    (setq-default dired-omit-mode t
                  dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\."))

  (use-package dired+
    :ensure t)
#+END_SRC

*** Scala-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package scala-mode2
    :ensure t
    :config
    (setq scala-indent:align-forms t
          scala-indent:align-parameters t)
    (defun my/scala-mode-hook-defaults ()
      (subword-mode +1))
    (add-hook 'scala-mode-hook 'my/scala-mode-hook-defaults))
#+END_SRC
*** Markdown

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'")
#+END_SRC

*** F2j-mode

#+begin_src emacs-lisp :tangle yes
  (use-package f2j-mode
    :load-path "packages/")
#+end_src

*** Eshell

Type =clear= to clear the buffer like in other terminal emulators.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'eshell)
  (setq eshell-directory-name
        (expand-file-name "eshell" savefile-dir))

  (defun eshell/clear ()
    "Clears the shell buffer ala Unix's clear."
    ;; the shell prompts are read-only, so clear that for the duration
    (let ((inhibit-read-only t))
      ;; simply delete the region
      (erase-buffer)))
#+END_SRC

*** Java Mode

#+begin_src emacs-lisp :tangle yes
  (use-package cc-mode
    :defer t
    :init
    (add-hook 'java-mode-hook (lambda ()
                                (setq c-basic-offset 2))))
#+end_src

*** Haskell Mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package haskell-mode
    :ensure t
    :config
    (defun my/haskell-mode-defaults ()
      (subword-mode +1)
      (turn-on-haskell-doc-mode)
      (turn-on-haskell-indentation))

    (add-hook 'haskell-mode-hook 'my/haskell-mode-defaults)
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

    (require 'haskell)
    (bind-keys :map interactive-haskell-mode-map
               ("M-." . haskell-mode-goto-loc)
               ("M-," . pop-tag-mark)
               ("C-c C-t" . ghc-show-type))

    (setq haskell-process-auto-import-loaded-modules t
          haskell-interactive-types-for-show-ambiguous nil
          haskell-process-log t)

    (setq haskell-process-args-cabal-repl
          '("--ghc-option=-ferror-spans" "--with-ghc=ghci-ng"))

    (setq haskell-process-path-ghci "ghci-ng"))
#+END_SRC

*** SML Mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sml-mode
    :ensure t
    :mode "\\.sml\\'"
    :config
    (defun my-sml-prog-proc-send-buffer ()
      "If sml repl exists, then restart it else create a new repl."
      (interactive)
      (when (get-buffer "*sml*")
        (with-current-buffer "*sml*"
          (when (get-process "sml")
            (comint-send-eof)))
        (sleep-for 0.2)
        (sml-run "sml" ""))
      (sml-prog-proc-send-buffer t))
    (bind-key "C-c C-b" 'my-sml-prog-proc-send-buffer sml-mode-map))

#+END_SRC

*** Idris Mode

#+begin_src emacs-lisp :tangle yes
  (use-package idris-mode
    :ensure t)
#+end_src

*** Lua Mode

#+begin_src emacs-lisp :tangle yes
  (use-package lua-mode
    :ensure t)
#+end_src

*** Js2 Mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'")
#+END_SRC

** Minor Modes
*** Ido-related

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ido)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10
        ido-save-directory-list-file (expand-file-name "ido.hist" savefile-dir)
        ido-default-file-method 'selected-window
        ido-auto-merge-work-directories-length -1)
  (ido-mode +1)

  ;; disable ido faces to see flx highlights
  (setq ido-use-faces nil)

  (use-package ido-ubiquitous
    :disabled t
    :config
    (ido-ubiquitous-mode +1))

  (use-package flx-ido
    :disabled t
    :config
    (flx-ido-mode +1))

  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode +1))
#+END_SRC

*** Magit

[[https://github.com/magit/magit][Magit]] is the ultimate =git= interface for Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :pin melpa
    :commands magit-status
    :diminish (magit-auto-revert-mode ""))
#+END_SRC
*** hindent

#+begin_src emacs-lisp :tangle yes
  (use-package hindent
    :ensure t
    :config
    (setq hindent-style "gibiansky")
    (add-hook 'haskell-mode-hook #'hindent-mode))
#+end_src

*** quickrun

#+begin_src emacs-lisp :tangle yes
  (use-package quickrun :ensure t)
#+end_src

*** Wgrep

[[https://github.com/mhayashi1120/Emacs-wgrep][Wgrep]] allows you to edit a grep buffer and apply those changes to the
file buffer.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package wgrep-ag
    :ensure t
    :init
    (autoload 'wgrep-ag-setup "wgrep-ag")
    (add-hook 'ag-mode-hook 'wgrep-ag-setup))
#+END_SRC
*** Helm

=helm-mini= is a part of [[https://github.com/emacs-helm/helm][Helm]] that shows current buffers and a list of
recent files using =recentf=.  It is a great way to manage many open
files.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :ensure t
    :bind (("C-x C-f" . helm-find-files)
           ("M-y" . helm-show-kill-ring)
           ("C-h r" . helm-info-emacs)
           ("C-h a" . helm-apropos))
    :config
    (require 'helm-config)
    (require 'helm-files)

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-quick-update                     t
          helm-split-window-in-side-p           t
          helm-buffers-fuzzy-matching           t
          helm-move-to-line-cycle-in-source     t
          helm-ff-search-library-in-sexp        t
          helm-ff-file-name-history-use-recentf t)

    ;; show minibuffer history with Helm
    (bind-key "C-c C-l" 'helm-minibuffer-history minibuffer-local-map)

    ;; shell history.
    (bind-key "C-c C-l" 'helm-comint-input-ring shell-mode-map)

    (helm-mode +1))
#+END_SRC
*** Hydra

[[https://github.com/abo-abo/hydra][Hydra]] make Emacs bindings that stick around.

#+begin_src emacs-lisp :tangle yes
  (use-package hydra-examples
    :ensure hydra
    :config
    (defhydra hydra-move (global-map "C-S-o")
      "move"
      ("h" hydra-move-splitter-left)
      ("j" hydra-move-splitter-down)
      ("k" hydra-move-splitter-up)
      ("l" hydra-move-splitter-right))
    (key-chord-define-global
     "tt"
     (defhydra hydra-zoom ()
       "zoom"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")))
    (key-chord-define-global
     "hh"
     (defhydra hydra-error ()
       "goto-error"
       ("h" first-error "first")
       ("j" next-error "next")
       ("k" previous-error "prev"))))
#+end_src

*** Paradox

#+begin_src emacs-lisp :tangle no
  (use-package paradox
    :ensure t
    :config
    (setq paradox-github-token t)
    (setq paradox-execute-asynchronously t))
#+end_src

*** Pretty-mode

#+begin_src emacs-lisp :tangle yes
  (use-package pretty-mode
    :ensure t
    :idle (global-pretty-mode t))
#+end_src

*** Pandoc-mode

#+begin_src emacs-lisp :tangle yes
  (use-package pandoc-mode
    :ensure t
    :config
    (add-hook 'markdown-mode-hook 'pandoc-mode)
    (add-hook 'org-mode-hook 'pandoc-mode)
    (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings))
#+end_src
*** Elpy

#+begin_src emacs-lisp :tangle no
  (use-package elpy
    :ensure t
    :config
    (remove-hook 'elpy-modules 'elpy-module-flymake)
    (remove-hook 'elpy-modules 'elpy-module-yasnippet)
    (elpy-enable))
#+end_src
*** Chinese-font-setup

#+begin_src emacs-lisp :tangle yes
  (use-package chinese-fonts-setup
    :ensure t)
#+end_src

*** mwim

Move to the beginning/end of line or code

#+begin_src emacs-lisp :tangle yes
  (use-package mwim
    :bind (("C-a" . mwim-beginning-of-code-or-line)
           ("C-e" . mwim-end-of-code-or-line)))
#+end_src

*** Helm-swoop

[[https://github.com/ShingoFukuyama/helm-swoop][Helm-swoop]], efficiently hopping squeezed lines powered by Emacs
helm interface.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-swoop
    :ensure t
    :bind (("M-i" . helm-swoop)
           ("M-I" . helm-swoop-back-to-last-point)
           ("C-c M-i" . helm-multi-swoop)
           ("C-x M-i" . helm-multi-swoop-all))
    :config
    ;; When doing isearch, hand the word over to helm-swoop
    (bind-key "M-i" 'helm-swoop-from-isearch isearch-mode-map)
    ;; From helm-swoop to helm-multi-swoop-all
    (bind-key "M-i" 'helm-multi-swoop-all-from-helm-swoop helm-swoop-map))
#+END_SRC

*** Helm-descbinds

[[https://github.com/emacs-helm/helm-descbinds][Helm Descbinds]] provides an interface to emacs' =describe-bindings=
making the currently active key bindings interactively searchable
with helm.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-descbinds
    :defer t
    :ensure t
    :idle (helm-descbinds-mode 1))
#+END_SRC

*** Fullframe

[[https://github.com/tomterl/fullframe][Fullframe]] advises commands to execute fullscreen, restoring the window
setup when exiting.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fullframe
    :ensure t
    :config
    (fullframe magit-status magit-mode-quit-window)
    (fullframe monky-status monky-quit-window)
    (fullframe ibuffer ibuffer-quit))
#+END_SRC

*** Exec-path-from-shell

A GNU Emacs library to setup environment variables from the user's
shell.

#+begin_src emacs-lisp :tangle yes
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))
#+end_src

*** Mykie

[[https://github.com/yuutayamada/mykie-el][Mykie]] is a command multiplexer, which can add other functions to a
single keybind.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package mykie
    :ensure t
    :config
    (setq mykie:use-major-mode-key-override 'global)
    (mykie:initialize)
    (mykie:set-keys nil
      "C-e"
      :default (move-end-of-line 1)
      :repeat  (end-of-buffer)
      :C-u (beginning-of-buffer)
      "C-S-n"
      :default (next-line 4)
      "C-S-p"
      :default (previous-line 4)))
#+END_SRC

*** Ace-jump-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-jump-mode
    :ensure t
    :bind ("C-c SPC" . ace-jump-mode)
    :config
    (setq ace-jump-mode-move-keys
        '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?q ?w ?e ?r ?t ?y ?u ?i ?o ?p ?z ?x ?c ?v ?b ?n ?m)))
#+END_SRC
*** Alert

[[https://github.com/jwiegley/alert][Alert]] is a Growl-workalike for Emacs which uses a common notification
interface.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package alert
    :config
    (setq terminal-notifier-command (executable-find "terminal-notifier"))
    (alert-define-style 'timed-notification :title "Notify using terminal-notifier"
                        :notifier
                        (lambda (info)
                          (if terminal-notifier-command
                              (let ((args
                                     (list "-title" (alert-encode-string (plist-get info :title))
                                           "-message" (alert-encode-string (plist-get info :message))
                                           "-sound" "default"
                                           "-sender" "org.gnu.Emacs")))
                                (apply #'call-process terminal-notifier-command nil nil nil args))
                            (alert-message-notify info))))
    (setq alert-default-style 'timed-notification)

    ;; To reminder me to stand up from long time coding
    (defvar my-timer-obj nil
      "For canceling if I cannot bear")

    (defun start-my-timer ()
      "Timer for long time coding."
      (if my-timer-obj (cancel-timer my-timer-obj))
      (setq my-timer-obj
            (run-at-time "42 minutes" 2600
                         (lambda () (alert "Stand up, stretch out!" :title "Stop Watering"))))
      ;; (alert "Start timing!" :title "Emacs")
      )

    (defun stop-my-timer ()
      (if my-timer-obj (cancel-timer my-timer-obj))
      ;; (alert "Stop timing!" :title "Emacs")
      )

    (add-hook 'focus-in-hook #'start-my-timer)
    (add-hook 'focus-out-hook #'stop-my-timer))

#+END_SRC

*** Ace-isearch

#+begin_src emacs-lisp :tangle yes
  (use-package ace-isearch
    :ensure t
    :config
    (setq ace-isearch-use-ace-jump 'printing-char)
    (setq ace-isearch-input-idle-delay 0.8)
    (global-ace-isearch-mode +1))
#+end_src

*** Ace-window

[[https://github.com/abo-abo/ace-window][Ace-window]] provides window switching, the visual way.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-window
    :ensure t
    :bind ("C-x o" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-scope 'frame))
#+END_SRC

*** Rainbow mode

=rainbow-mode= displays hexadecimal colors with the color they
represent as their background.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
    :ensure t
    :diminish (rainbow-mode . "")
    :config
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

*** Rainbow-delimiter

[[https://github.com/jlr/rainbow-delimiters][Rainbow Delimiters]] is a “rainbow parentheses”-like mode which
highlights parentheses, brackets, and braces according to their depth

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

*** Operate-on-numbes

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package operate-on-number
    :config
    (require 'smartrep)
    (setq smartrep-mode-line-active-bg nil)
    (smartrep-define-key global-map "C-c ."
      '(("+" . apply-operation-to-number-at-point)
        ("-" . apply-operation-to-number-at-point)
        ("*" . apply-operation-to-number-at-point)
        ("/" . apply-operation-to-number-at-point)
        ("^" . apply-operation-to-number-at-point)
        ("<" . apply-operation-to-number-at-point)
        (">" . apply-operation-to-number-at-point)
        ("'" . operate-on-number-at-point))))
#+END_SRC

*** Expand-region

[[https://github.com/magnars/expand-region.el][Expand-region]] increases the selected region by semantic units. Just
keep pressing the key until it selects what you want.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :ensure t
    :bind ("M-2" . er/expand-region))
#+END_SRC

*** Whitespace

Whitespace-mode configuration.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace
    :diminish (whitespace-mode . "")
    :config
    ;; (setq whitespace-line-column 80)
    (setq whitespace-style '(face tabs trailing))

    (defun prelude-enable-whitespace ()
      "Enable `whitespace-mode' if `prelude-whitespace' is not nil."
      ;; (add-hook 'before-save-hook 'whitespace-cleanup nil t)
      (whitespace-mode +1))

    (add-hook 'text-mode-hook 'prelude-enable-whitespace)
    (add-hook 'prog-mode-hook 'prelude-enable-whitespace))

#+END_SRC

*** Whitespace-cleanup-mode

#+begin_src emacs-lisp :tangle yes
  (use-package whitespace-cleanup-mode
    :ensure t
    :diminish (whitespace-cleanup-mode . "")
    :config
    (add-hook 'prog-mode-hook 'whitespace-cleanup-mode))
#+end_src

*** Ag

[[https://github.com/Wilfred/ag.el][Ag.el]] is a simple ag frontend, loosely based on ack-and-half.el.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ag
    :ensure t
    :config
    (setq ag-highlight-search t))
#+END_SRC
*** Projectile

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :diminish ""
    :config
    (setq projectile-cache-file
          (expand-file-name  "projectile.cache" savefile-dir)
          projectile-completion-system 'helm
          projectile-sort-order 'modification-time)
    (projectile-global-mode t))
#+END_SRC

*** Helm-projectile

#+begin_src emacs-lisp :tangle yes
  (use-package helm-projectile
    :ensure t
    :bind (("s-p" . helm-projectile-switch-project)
           ("s-f" . helm-projectile-find-file)
           ("s-g" . helm-projectile-ag))
    :config
    (setq projectile-switch-project-action 'helm-projectile-find-file)
    (helm-projectile-on))
#+end_src

*** Helm-ag

#+begin_src emacs-lisp :tangle yes
  (use-package helm-ag
    :defer t
    :ensure t)
#+end_src

*** Discover-my-major

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package discover-my-major
    :config
    (bind-key "C-m" 'discover-my-major 'help-command))
#+END_SRC

*** Lispy

[[https://github.com/abo-abo/lispy][Lispy]] implements various vi-like commands for navigating and editing
Lisp code.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lispy
    :defer t
    :ensure t
    :init
    (dolist (hook '(emacs-lisp-mode-hook
                    lisp-mode-hook
                    scheme-mode-hook
                    clojure-mode-hook))
      (add-hook hook (lambda () (lispy-mode +1))))
    :config
    (bind-keys :map lispy-mode-map
               ("C-e" . nil)
               ("/" . nil)
               ("M-i" . nil)
               ("M-e" . lispy-iedit)
               ("S" . special-lispy-splice)
               ("g" . special-lispy-goto-local)
               ("G" . special-lispy-goto)))
#+END_SRC

*** Yasnippets

Snippets are keys.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t
    :diminish (yas-minor-mode . "")
    :config
    (add-to-list 'auto-mode-alist '("\\.yasnippet$" . snippet-mode))
    (setq yas-verbosity 1)
    (setq yas-wrap-around-region t)
    (setq-default yas-prompt-functions '(yas-ido-prompt))
    (bind-key "<return>" 'yas-exit-all-snippets yas-keymap)
    :idle (yas-global-mode 1))
#+END_SRC

*** Undo-Tree

More natural undo or redo. Undo with =C-/= and redo with =C-?=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
    :ensure t
    :diminish (undo-tree-mode . "")
    :config
    ;; autosave the undo-tree history
    (setq undo-tree-history-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq undo-tree-auto-save-history t)
    (global-undo-tree-mode 1))
#+END_SRC

*** Cider

#+begin_src emacs-lisp :tangle yes
  (use-package cider
    :defer t
    :ensure t
    :config
    (setq nrepl-log-messages t)
    (setq nrepl-hide-special-buffers t)
    (setq cider-repl-use-clojure-font-lock t)
    (setq cider-repl-result-prefix ";; => ")
    (setq cider-interactive-eval-result-prefix ";; => ")
    (add-hook 'cider-mode-hook 'eldoc-mode)
    (defun my/cider-repl-mode-defaults ()
      (subword-mode +1)
      (smartparens-strict-mode +1))
    (add-hook 'cider-repl-mode-hook 'my/cider-repl-mode-defaults))
#+end_src
*** Company

[[https://github.com/company-mode/company-mode][Company]] is a code completion framework for Emacs. The name stands for
"complete anything".

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :defer t
    :idle (global-company-mode)
    :diminish (company-mode . "")
    :config
    (setq company-tooltip-align-annotations t)
    (setq company-dabbrev-ignore-case nil)
    (setq company-dabbrev-downcase nil)
    (eval-after-load 'company-dabbrev-code
      '(dolist (mode '(coq-mode oz-mode))
         (add-to-list 'company-dabbrev-code-modes mode)))
    ;; invert the navigation direction if the the completion popup-isearch-match
    ;; is displayed on top (happens near the bottom of windows)
    (setq company-tooltip-flip-when-above t)
    (setq company-dabbrev-code-other-buffers 'code))
#+END_SRC

*** Company-ghc

#+begin_src emacs-lisp :tangle yes
  (use-package company-ghc
    :ensure t
    :config
    (add-to-list 'company-backends '(company-ghc :with company-dabbrev-code)))
#+end_src

*** Flyspell

Enable spell-checking in Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flyspell
    :diminish (flyspell-mode . "")
    :init
    ;; Enable spell check in only plaintext
    (add-hook 'text-mode-hook 'flyspell-mode)
    ;; Enable spell check in comments
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    :config
    (setq flyspell-issue-welcome-flag nil)
    (setq flyspell-issue-message-flag nil)
    (setq ispell-program-name "aspell"    ; use aspell instead of ispell
          ispell-extra-args '("--sug-mode=ultra"))
    ;; Make spell check on right click.
    (define-key flyspell-mouse-map [down-mouse-3] 'flyspell-correct-word)
    (define-key flyspell-mouse-map [mouse-3] 'undefined)
    (define-key flyspell-mode-map (kbd "C-M-i") nil)
    (define-key flyspell-mode-map (kbd "C-;") nil)
    ;; Work with auto-complete
    (require 'auto-complete)
    (ac-flyspell-workaround))

#+END_SRC

**** Helpful Default Keybindings
=C-.= corrects word at point.  =C-,​= to jump to next misspelled word.
*** Browse-kill-ring

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package browse-kill-ring
    :config
    (browse-kill-ring-default-keybindings))
#+END_SRC

*** Flycheck

A great syntax checker.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :bind ("C-c L" . flycheck-list-errors)
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    (setq flycheck-indication-mode 'left-fringe)
    (setq flycheck-completion-system 'ido))
#+END_SRC

*** Flycheck-haskell

#+begin_src emacs-lisp :tangle no
  (use-package flycheck-haskell
    :ensure t
    :init
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-haskell-setup)))
#+end_src

*** Pop Win

[[https://github.com/m2ym/popwin-el][popwin]] is used to manage the size of "popup" buffers.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package popwin
    :ensure t
    :config
    (popwin-mode 1))
#+END_SRC

*** Multiple Cursors

[[https://github.com/emacsmirror/multiple-cursors][Multiple Cursors]] brings you seemingly unlimited power.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)
           ("C-c C->" . mc/mark-more-like-this-extended))
    :init
    (setq mc/list-file (expand-file-name "mc-lists.el" savefile-dir)))
#+END_SRC

*** Move-text

Move lines or a region up or down.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package move-text
    :ensure t
    :bind (("<C-M-up>" . move-text-up)
           ("<C-M-down>" . move-text-down)))
#+END_SRC

*** Guide-key

[[https://github.com/kbkbkbkb1/guide-key][Guide-key.el]] displays the available key bindings automatically and
dynamically.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package guide-key
    :ensure t
    :diminish (guide-key-mode . "")
    :config
    (guide-key-mode 1)
    (setq guide-key/guide-key-sequence
          '("C-x r" "C-c h" "C-x 4" "C-x 5"
            (org-mode "C-c C-x")))
    (setq guide-key/popup-window-position 'bottom)
    (setq guide-key/highlight-command-regexp
          '(("rectangle" . font-lock-warning-face)
            ("register"  . font-lock-type-face))))
#+END_SRC

*** Reveal-in-finder

Open file in Finder

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package reveal-in-finder
    :ensure t
    :if (eq system-type 'darwin)
    :bind
    ("C-c o" . reveal-in-finder))
#+END_SRC

*** Sbt-mode

[[https://github.com/hvesalai/sbt-mode][Sbt-mode]] is an emacs mode for interacting with sbt, scala console
(aka REPL) and sbt projects.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sbt-mode
    :ensure t
    :config
    (add-hook 'scala-mode-hook
              '(lambda ()
                 (local-set-key (kbd "C-x '") 'sbt-run-previous-command)))
    (add-hook 'sbt-mode-hook
              '(lambda ()
                 (setq compilation-skip-threshold 1)
                 (local-set-key (kbd "C-a") 'comint-bol)
                 (local-set-key (kbd "M-RET") 'comint-accumulate))))
#+END_SRC

*** Ensime

[[https://github.com/ensime/ensime-src][ENSIME]] is the ENhanced Scala Interaction Mode for Emacs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ensime
    :ensure t
    :init
    (add-hook 'scala-mode-hook 'ensime-scala-mode-hook))
#+END_SRC

*** Color-identifiers-mode

[[https://github.com/ankurdave/color-identifiers-mode][Color Identifiers]] is a minor mode for Emacs that highlights each
source code identifier uniquely based on its name.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package color-identifiers-mode
    :diminish (color-identifiers-mode . "")
    :init
    (add-hook 'after-init-hook #'global-color-identifiers-mode))
#+END_SRC

*** Ebib

[[https://github.com/joostkremers/ebib][Ebib]] is a BibTeX database manager that runs in GNU Emacs.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ebib
    :ensure t
    :config
    (setq ebib-preload-bib-files (quote ("~/research/refs.bib")))
    (bind-key "C-c b" 'ebib-insert-bibtex-key org-mode-map))
#+END_SRC

*** Lexbind-mode

[[https://github.com/spacebat/lexbind-mode][Lexbind-mode]] is an Emacs minor mode to display the value of the
lexical-binding variable which determines the behaviour of
variable binding forms in Emacs Lisp.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lexbind-mode
    :ensure t
    :init
    (setq initial-buffer-choice 'lexbind-lexscratch)
    :config
    (add-hook 'emacs-lisp-mode-hook 'lexbind-mode))
#+END_SRC

*** Smartparens

Show matching and unmatched delimiters, and auto-close them as well.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens-config
    :ensure smartparens
    :config
    ;; highlights matching pairs
    (setq sp-base-key-bindings 'paredit)
    (setq sp-autoskip-closing-pair 'always)
    (setq sp-hybrid-kill-entire-symbol nil)
    (sp-use-paredit-bindings)
    (sp-pair "{" nil :post-handlers
             '(((lambda (&rest _ignored)
                  (prelude-smart-open-line-above)) "RET")))
    (smartparens-global-mode +1))
#+END_SRC

*** GHC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ghc
    :ensure t
    :pin melpa-stable
    :config
    (autoload 'ghc-init "ghc" nil t)
    (autoload 'ghc-debug "ghc" nil t)
    (setq ghc-ghc-options '("-fno-warn-unused-do-bind"))
    (add-hook 'haskell-mode-hook (lambda () (ghc-init))))
#+END_SRC

*** Structured-haskell-mode

[[https://github.com/chrisdone/structured-haskell-mode][Structured-haskell-mode]] is a minor mode providing structured editing
operations based on the syntax of Haskell.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package shm
    :config
    (add-hook 'haskell-mode-hook 'structured-haskell-mode)
    (define-key shm-map (kbd "M-s") nil)
    (define-key shm-map (kbd "M-S") 'shm/splice)
    (require 'shm-reformat)
    (setq hindent-style "chris-done")
    (bind-key "C-c i" 'shm-reformat-decl haskell-mode-map))
#+END_SRC

*** Ace-link

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-link
    :config
    (ace-link-setup-default))
#+END_SRC

*** Easy-kill

[[https://github.com/leoliu/easy-kill][easy-kill]] provides commands to let users kill or mark things easily.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] 'easy-kill))
#+END_SRC

*** Dash-at-point

[[Dash][http://kapeli.com/]] is an API Documentation Browser and Code Snippet
Manager. [[https://github.com/stanaka/dash-at-point][dash-at-point]] make it easy to search the word at point with
Dash.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dash-at-point
    :ensure t
    :if (eq system-type 'darwin))
#+END_SRC

*** Visual-regexp-steroids

[[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids]] enables the use of modern regexp engines (no
more escaped group parentheses, and other goodies!).

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-regexp-steroids
    :ensure t
    :bind ("C-c r" . vr/replace))
#+END_SRC

*** Pcre2el

[[https://github.com/joddie/pcre2el][pcre2el]] is a utility for working with regular expressions in Emacs,
based on a recursive-descent parser for regexp syntax.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pcre2el)
#+END_SRC

*** Worf Mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package worf
    :ensure t
    :config
    (add-hook 'org-mode-hook 'worf-mode))
#+END_SRC

*** Skeletor

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package skeletor
    :ensure t
    :config
    (setq skeletor-scala-use-ensime t))
#+END_SRC

*** ggtags

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ggtags
    :ensure t
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1)
                  (setq-local eldoc-documentation-function #'ggtags-eldoc-function)))))
#+END_SRC

*** electric-spacing

#+begin_src emacs-lisp :tangle yes
  (use-package electric-spacing
    :ensure t
    :config
    (add-hook 'text-mode-hook 'electric-spacing-mode)
    (add-to-list 'electric-spacing-regexp-pairs
                 '("\\cA\\|\\cC\\|\\ck\\|\\cK\\|\\cH" . "[0-9A-Za-z]"))
    (add-to-list 'electric-spacing-regexp-pairs
                 '("[0-9A-Za-z]" . "\\cA\\|\\cC\\|\\ck\\|\\cK\\|\\cH")))
#+end_src

*** VLFI

View Large Files in Emacs

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package vlf-setup
    :ensure vlf
    :config
    (setq vlf-batch-size 10240)
    (setq vlf-application 'dont-ask))
#+END_SRC
*** Anzu Mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package anzu
    :ensure t
    :bind (("M-%" . anzu-query-replace)
           ("C-M-%" . anzu-query-replace-regexp))
    :diminish (anzu-mode . "")
    :init
    (global-anzu-mode +1))
#+END_SRC

*** Volatile-highlights

#+begin_src emacs-lisp :tangle no
  (use-package volatile-highlights
    :diminish (volatile-highlights-mode . "")
    :config
    (volatile-highlights-mode t))
#+end_src

*** Multi-term

Consult [[http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/][Zsh and Multi-term]] for setup probelm.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multi-term
    :ensure t
    :bind (("C-c t" . multi-term)
           ("C-c \"" . multi-term-dedicated-toggle))
    :config
    (setq multi-term-program (getenv "SHELL")
          multi-term-buffer-name "term"
          multi-term-dedicated-select-after-open-p t)
    (add-hook 'term-mode-hook
              (lambda ()
                (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
                (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
                ;; conflict with yasnippet
                (yas-minor-mode -1)
                (company-mode -1))))
#+END_SRC

*** Git-timemachine

#+begin_src emacs-lisp :tangle yes
  (use-package git-timemachine
    :ensure t)
#+end_src

** Buffer
*** Toggle Windows

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun toggle-window-split ()
    "Toggle window splitting between horizontal to vertical."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+END_SRC

*** Indent and untabfy Buffer

#+BEGIN_SRC emacs-lisp :tangle yes
  (defmacro with-region-or-buffer (func)
    "When called with no active region, call FUNC on current buffer."
    `(defadvice ,func (before with-region-or-buffer activate compile)
       (interactive
        (if mark-active
            (list (region-beginning) (region-end))
          (list (point-min) (point-max))))))

  (with-region-or-buffer indent-region)
  (with-region-or-buffer untabify)
#+END_SRC

** Miscellaneous
*** Search

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun prelude-search (query-url prompt)
    "Open the search url constructed with the QUERY-URL.
  PROMPT sets the `read-string prompt."
    (browse-url
     (concat query-url
             (url-hexify-string
              (if mark-active
                  (buffer-substring (region-beginning) (region-end))
                (read-string prompt))))))

  (defmacro prelude-install-search-engine (search-engine-name search-engine-url search-engine-prompt)
    "Given some information regarding a search engine, install the
  interactive command to search through them"
    `(defun ,(intern (format "prelude-%s" search-engine-name)) ()
       ,(format "Search %s with a query or region if any." search-engine-name)
       (interactive)
       (prelude-search ,search-engine-url ,search-engine-prompt)))

  (prelude-install-search-engine "google" "http://www.google.com/search?q=" "Google: ")
  (prelude-install-search-engine "github" "https://github.com/search?q=" "Search GitHub: ")
#+END_SRC
*** Colorize compilation buffers

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Compilation from Emacs
  (defun prelude-colorize-compilation-buffer ()
    "Colorize a compilation mode buffer."
    (interactive)
    ;; we don't want to mess with child modes such as grep-mode, ack, ag,
    ;; etc
    (when (eq major-mode 'compilation-mode)
      (let ((inhibit-read-only t))
        (ansi-color-apply-on-region (point-min) (point-max)))))

  (require 'compile)
  (setq compilation-ask-about-save nil  ; Just save before compiling
        compilation-always-kill t       ; Just kill old compile processes before
                                          ; starting the new one
        compilation-scroll-output 'first-error ; Automatically scroll to first
                                          ; error
        )

  ;; Colorize output of Compilation Mode, see
  ;; http://stackoverflow.com/a/3072831/355252
  (require 'ansi-color)
  (add-hook 'compilation-filter-hook #'prelude-colorize-compilation-buffer)
#+END_SRC

*** Annotate TODOs

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ov
    :config
    (defun prelude-todo-ov-evaporate (_ov _after _beg _end &optional _length)
      (let ((inhibit-modification-hooks t))
        (if _after (ov-reset _ov))))
    (defun prelude-annotate-todo ()
      "Put fringe marker on TODO: lines in the curent buffer."
      (interactive)
      (ov-set (format "[[:space:]]*%s+[[:space:]]*TODO:" comment-start)
              'before-string
              (propertize (format "A")
                          'display '(left-fringe right-triangle))
              'modification-hooks '(prelude-todo-ov-evaporate))))
#+END_SRC

*** Rename Mode Line

#+BEGIN_SRC emacs-lisp :tangle yes
  (defmacro rename-modeline (package-name mode new-name)
    `(eval-after-load ,package-name
       '(defadvice ,mode (after rename-modeline activate)
          (setq mode-name ,new-name))))

  (rename-modeline "js2-mode" js2-mode "JS2")
  (rename-modeline "clojure-mode" clojure-mode "Clj")
  (rename-modeline "haskell-mode" haskell-mode "HS")
  (rename-modeline "scala-mode2" scala-mode "SCA")
  (rename-modeline "lisp-mode" emacs-lisp-mode "EL")
  (rename-modeline "lisp-mode" lisp-interaction-mode "EI")
#+END_SRC

*** Auto Correct

Auto-correction abbrev defs:

#+begin_src emacs-lisp :tangle yes
  (define-abbrev-table 'global-abbrev-table '(
      ("abbout" "about" nil 0)
      ("abotu" "about" nil 0)
      ("abouta" "about a" nil 0)
      ("aboutit" "about it" nil 0)
      ("aboutthe" "about the" nil 0)
      ("abscence" "absence" nil 0)
      ("accesories" "accessories" nil 0)
      ("accidant" "accident" nil 0)
      ("accomodate" "accommodate" nil 0)
      ("accordingto" "according to" nil 0)
      ("accross" "across" nil 0)
      ("acheive" "achieve" nil 0)
      ("acheived" "achieved" nil 0)
      ("acheiving" "achieving" nil 0)
      ("acn" "can" nil 0)
      ("acommodate" "accommodate" nil 0)
      ("acomodate" "accommodate" nil 0)
      ("acomplished" "accomplished" nil 0)
      ("actualyl" "actually" nil 0)
      ("acurate" "accurate" nil 0)
      ("addictional" "additional" nil 0)
      ("additinal" "additional" nil 0)
      ("addtional" "additional" nil 0)
      ("addtions" "additions" nil 0)
      ("adequit" "adequate" nil 0)
      ("adequite" "adequate" nil 0)
      ("adn" "and" nil 0)
      ("advanage" "advantage" nil 0)
      ("affraid" "afraid" nil 0)
      ("afterthe" "after the" nil 0)
      ("aganist" "against" nil 0)
      ("aggresive" "aggressive" nil 0)
      ("agian" "again" nil 0)
      ("agreemeent" "agreement" nil 0)
      ("agreemeents" "agreements" nil 0)
      ("agreemnet" "agreement" nil 0)
      ("agreemnets" "agreements" nil 0)
      ("agressive" "aggressive" nil 0)
      ("ahppen" "happen" nil 0)
      ("ahve" "have" nil 0)
      ("allwasy" "always" nil 0)
      ("allwyas" "always" nil 0)
      ("almots" "almost" nil 0)
      ("almsot" "almost" nil 0)
      ("alomst" "almost" nil 0)
      ("alot" "a lot" nil 0)
      ("alraedy" "already" nil 0)
      ("alreayd" "already" nil 0)
      ("alreday" "already" nil 0)
      ("alwasy" "always" nil 0)
      ("alwats" "always" nil 0)
      ("alway" "always" nil 0)
      ("alwyas" "always" nil 0)
      ("amde" "made" nil 0)
      ("ameria" "America" nil 0)
      ("amke" "make" nil 0)
      ("amkes" "makes" nil 0)
      ("anbd" "and" nil 0)
      ("andone" "and one" nil 0)
      ("andt he" "and the" nil 0)
      ("andteh" "and the" nil 0)
      ("andthe" "and the" nil 0)
      ("anothe" "another" nil 0)
      ("anual" "annual" nil 0)
      ("apache" "Apache" nil 0)
      ("apparant" "apparent" nil 0)
      ("apparrent" "apparent" nil 0)
      ("appearence" "appearance" nil 0)
      ("appeares" "appears" nil 0)
      ("applicaiton" "application" nil 0)
      ("applicaitons" "applications" nil 0)
      ("applyed" "applied" nil 0)
      ("appointiment" "appointment" nil 0)
      ("approrpiate" "appropriate" nil 0)
      ("approrpriate" "appropriate" nil 0)
      ("aquisition" "acquisition" nil 0)
      ("aquisitions" "acquisitions" nil 0)
      ("arent" "aren't" nil 0)
      ("arguement" "argument" nil 0)
      ("arguements" "arguments" nil 0)
      ("arnt" "aren't" nil 0)
      ("arond" "around" nil 0)
      ("artical" "article" nil 0)
      ("articel" "article" nil 0)
      ("asdvertising" "advertising" nil 0)
      ("assistent" "assistant" nil 0)
      ("asthe" "as the" nil 0)
      ("atention" "attention" nil 0)
      ("atmospher" "atmosphere" nil 0)
      ("attentioin" "attention" nil 0)
      ("atthe" "at the" nil 0)
      ("audeince" "audience" nil 0)
      ("audiance" "audience" nil 0)
      ("authetication" "authentication" nil 0)
      ("availalbe" "available" nil 0)
      ("awya" "away" nil 0)
      ("aywa" "away" nil 0)
      ("bakc" "back" nil 0)
      ("balence" "balance" nil 0)
      ("ballance" "balance" nil 0)
      ("baout" "about" nil 0)
      ("bcak" "back" nil 0)
      ("beacause" "because" nil 0)
      ("beacuse" "because" nil 0)
      ("becasue" "because" nil 0)
      ("becaus" "because" nil 0)
      ("becausea" "because a" nil 0)
      ("becauseof" "because of" nil 0)
      ("becausethe" "because the" nil 0)
      ("becauseyou" "because you" nil 0)
      ("becomeing" "becoming" nil 0)
      ("becomming" "becoming" nil 0)
      ("becuase" "because" nil 0)
      ("becuse" "because" nil 0)
      ("befoer" "before" nil 0)
      ("beggining" "beginning" nil 0)
      ("begining" "beginning" nil 0)
      ("beginining" "beginning" nil 0)
      ("behabviour" "behaviour" nil 0)
      ("behaivior" "behaviour" nil 0)
      ("behavour" "behaviour" nil 0)
      ("beleiev" "believe" nil 0)
      ("beleieve" "believe" nil 0)
      ("beleif" "belief" nil 0)
      ("beleive" "believe" nil 0)
      ("beleived" "believed" nil 0)
      ("beleives" "believes" nil 0)
      ("beliefe" "belief" nil 0)
      ("beliveve" "believe" nil 0)
      ("benifit" "benefit" nil 0)
      ("benifits" "benefits" nil 0)
      ("betwen" "between" nil 0)
      ("beutiful" "beautiful" nil 0)
      ("blase" "blase" nil 0)
      ("boxs" "boxes" nil 0)
      ("brodcast" "broadcast" nil 0)
      ("butthe" "but the" nil 0)
      ("bve" "be" nil 0)
      ("cafe" "cafe" nil 0)
      ("caharcter" "character" nil 0)
      ("calcullated" "calculated" nil 0)
      ("calulated" "calculated" nil 0)
      ("candidtae" "candidate" nil 0)
      ("candidtaes" "candidates" nil 0)
      ("caontains" "contains" nil 0)
      ("capabilites" "capabilities" nil 0)
      ("catagory" "category" nil 0)
      ("categiory" "category" nil 0)
      ("certian" "certain" nil 0)
      ("challange" "challenge" nil 0)
      ("challanges" "challenges" nil 0)
      ("chaneg" "change" nil 0)
      ("chanegs" "changes" nil 0)
      ("changable" "changeable" nil 0)
      ("changeing" "changing" nil 0)
      ("changng" "changing" nil 0)
      ("charachter" "character" nil 0)
      ("charachters" "characters" nil 0)
      ("charactor" "character" nil 0)
      ("charecter" "character" nil 0)
      ("charector" "character" nil 0)
      ("cheif" "chief" nil 0)
      ("chekc" "check" nil 0)
      ("chnage" "change" nil 0)
      ("cieling" "ceiling" nil 0)
      ("circut" "circuit" nil 0)
      ("claer" "clear" nil 0)
      ("claered" "cleared" nil 0)
      ("claerly" "clearly" nil 0)
      ("cliant" "client" nil 0)
      ("cliche" "cliche" nil 0)
      ("cna" "can" nil 0)
      ("colection" "collection" nil 0)
      ("comanies" "companies" nil 0)
      ("comany" "company" nil 0)
      ("comapnies" "companies" nil 0)
      ("comapny" "company" nil 0)
      ("combintation" "combination" nil 0)
      ("comited" "committed" nil 0)
      ("comittee" "committee" nil 0)
      ("commadn" "command" nil 0)
      ("comming" "coming" nil 0)
      ("commitee" "committee" nil 0)
      ("committe" "committee" nil 0)
      ("committment" "commitment" nil 0)
      ("committments" "commitments" nil 0)
      ("committy" "committee" nil 0)
      ("comntain" "contain" nil 0)
      ("comntains" "contains" nil 0)
      ("compair" "compare" nil 0)
      ("compatable" "compatible" nil 0)
      ("compleated" "completed" nil 0)
      ("compleatly" "completely" nil 0)
      ("compleatness" "completeness" nil 0)
      ("completly" "completely" nil 0)
      ("completness" "completeness" nil 0)
      ("complteted" "completed" nil 0)
      ("composate" "composite" nil 0)
      ("compteted" "completed" nil 0)
      ("comtain" "contain" nil 0)
      ("comtains" "contains" nil 0)
      ("comunicate" "communicate" nil 0)
      ("comunity" "community" nil 0)
      ("condersider" "consider" nil 0)
      ("condolances" "condolences" nil 0)
      ("conected" "connected" nil 0)
      ("conferance" "conference" nil 0)
      ("configration" "configuration" nil 0)
      ("confirmmation" "confirmation" nil 0)
      ("conjuntion" "conjunction" nil 0)
      ("considerit" "considerate" nil 0)
      ("considerite" "considerate" nil 0)
      ("consistant" "consistent" nil 0)
      ("consonent" "consonant" nil 0)
      ("conspiricy" "conspiracy" nil 0)
      ("constuction" "construction" nil 0)
      ("consultent" "consultant" nil 0)
      ("consumeable" "consumable" nil 0)
      ("contitions" "conditions" nil 0)
      ("controlable" "controllable" nil 0)
      ("convertable" "convertible" nil 0)
      ("cooparate" "cooperate" nil 0)
      ("cooporate" "cooperate" nil 0)
      ("corproation" "corporation" nil 0)
      ("corproations" "corporations" nil 0)
      ("corrospond" "correspond" nil 0)
      ("corruptable" "corruptible" nil 0)
      ("cotten" "cotton" nil 0)
      ("coudl" "could" nil 0)
      ("coudln" "couldn" nil 0)
      ("coudn" "couldn" nil 0)
      ("couldnt" "couldn't" nil 0)
      ("couldthe" "could the" nil 0)
      ("cpoy" "copy" nil 0)
      ("creme" "creme" nil 0)
      ("ctaegory" "category" nil 0)
      ("cusotmer" "customer" nil 0)
      ("cusotmers" "customers" nil 0)
      ("cutsomer" "customer" nil 0)
      ("cutsomers" "customers" nil 0)
      ("cxan" "can" nil 0)
      ("danceing" "dancing" nil 0)
      ("dcument" "document" nil 0)
      ("deatils" "details" nil 0)
      ("decison" "decision" nil 0)
      ("decisons" "decisions" nil 0)
      ("decor" "decor" nil 0)
      ("defendent" "defendant" nil 0)
      ("definately" "definitely" nil 0)
      ("definded" "defined" nil 0)
      ("dependances" "dependencies" nil 0)
      ("deptartment" "department" nil 0)
      ("desicion" "decision" nil 0)
      ("desicions" "decisions" nil 0)
      ("desision" "decision" nil 0)
      ("desisions" "decisions" nil 0)
      ("detente" "detente" nil 0)
      ("determin" "determine" nil 0)
      ("determins" "determine" nil 0)
      ("develeoprs" "developers" nil 0)
      ("devellop" "develop" nil 0)
      ("develloped" "developed" nil 0)
      ("develloper" "developer" nil 0)
      ("devellopers" "developers" nil 0)
      ("develloping" "developing" nil 0)
      ("devellopment" "development" nil 0)
      ("devellopments" "developments" nil 0)
      ("devellops" "develop" nil 0)
      ("develope" "develop" nil 0)
      ("developement" "development" nil 0)
      ("developements" "developments" nil 0)
      ("developor" "developer" nil 0)
      ("developors" "developers" nil 0)
      ("develpment" "development" nil 0)
      ("devloped" "developed" nil 0)
      ("diaplay" "display" nil 0)
      ("didint" "didn't" nil 0)
      ("didnot" "did not" nil 0)
      ("didnt" "didn't" nil 0)
      ("difefrent" "different" nil 0)
      ("diferences" "differences" nil 0)
      ("differance" "difference" nil 0)
      ("differances" "differences" nil 0)
      ("differant" "different" nil 0)
      ("differemt" "different" nil 0)
      ("differnt" "different" nil 0)
      ("diffrent" "different" nil 0)
      ("directer" "director" nil 0)
      ("directers" "directors" nil 0)
      ("directiosn" "direction" nil 0)
      ("disatisfied" "dissatisfied" nil 0)
      ("discoverd" "discovered" nil 0)
      ("disign" "design" nil 0)
      ("dispaly" "display" nil 0)
      ("dissonent" "dissonant" nil 0)
      ("distribusion" "distribution" nil 0)
      ("distrubution" "distribution" nil 0)
      ("divsion" "division" nil 0)
      ("docuement" "documents" nil 0)
      ("docuemnt" "document" nil 0)
      ("documetn" "document" nil 0)
      ("documnet" "document" nil 0)
      ("documnets" "documents" nil 0)
      ("doese" "does" nil 0)
      ("doesnt" "doesn't" nil 0)
      ("doign" "doing" nil 0)
      ("doimg" "doing" nil 0)
      ("doind" "doing" nil 0)
      ("dollers" "dollars" nil 0)
      ("donig" "doing" nil 0)
      ("dont" "don't" nil 0)
      ("dont" "don't" nil 0)
      ("dosnt" "doesn't" nil 0)
      ("driveing" "driving" nil 0)
      ("drnik" "drink" nil 0)
      ("eclair" "eclair" nil 0)
      ("efel" "feel" nil 0)
      ("effecient" "efficient" nil 0)
      ("efort" "effort" nil 0)
      ("eforts" "efforts" nil 0)
      ("ehr" "her" nil 0)
      ("eligable" "eligible" nil 0)
      ("emacs" "Emacs" nil 0)
      ("embarass" "embarrass" nil 0)
      ("emigre" "emigre" nil 0)
      ("enahancements" "enhancements" nil 0)
      ("english" "English" nil 0)
      ("enought" "enough" nil 0)
      ("entree" "entree" nil 0)
      ("equippment" "equipment" nil 0)
      ("equivalant" "equivalent" nil 0)
      ("esle" "else" nil 0)
      ("especally" "especially" nil 0)
      ("especialyl" "especially" nil 0)
      ("espesially" "especially" nil 0)
      ("excellant" "excellent" nil 0)
      ("excercise" "exercise" nil 0)
      ("exchagne" "exchange" nil 0)
      ("exchagnes" "exchanges" nil 0)
      ("excitment" "excitement" nil 0)
      ("exhcange" "exchange" nil 0)
      ("exhcanges" "exchanges" nil 0)
      ("experiance" "experience" nil 0)
      ("experienc" "experience" nil 0)
      ("exprience" "experience" nil 0)
      ("exprienced" "experienced" nil 0)
      ("eyt" "yet" nil 0)
      ("facade" "facade" nil 0)
      ("faeture" "feature" nil 0)
      ("faetures" "features" nil 0)
      ("familair" "familiar" nil 0)
      ("familar" "familiar" nil 0)
      ("familliar" "familiar" nil 0)
      ("fammiliar" "familiar" nil 0)
      ("feild" "field" nil 0)
      ("feilds" "fields" nil 0)
      ("fianlly" "finally" nil 0)
      ("fidn" "find" nil 0)
      ("fifith" "fifth" nil 0)
      ("finalyl" "finally" nil 0)
      ("finnally" "finally" nil 0)
      ("finnish" "finish" nil 0)
      ("firends" "friends" nil 0)
      ("firts" "first" nil 0)
      ("fixit" "fix it" nil 0)
      ("follwo" "follow" nil 0)
      ("follwoing" "following" nil 0)
      ("foloowing" "following" nil 0)
      ("fora" "for a" nil 0)
      ("foriegn" "foreign" nil 0)
      ("forthe" "for the" nil 0)
      ("forwrd" "forward" nil 0)
      ("forwrds" "forwards" nil 0)
      ("foudn" "found" nil 0)
      ("foward" "forward" nil 0)
      ("fowards" "forwards" nil 0)
      ("freind" "friend" nil 0)
      ("freindly" "friendly" nil 0)
      ("freinds" "friends" nil 0)
      ("frmo" "from" nil 0)
      ("fromt he" "from the" nil 0)
      ("fromthe" "from the" nil 0)
      ("furneral" "funeral" nil 0)
      ("fwe" "few" nil 0)
      ("garantee" "guarantee" nil 0)
      ("gaurd" "guard" nil 0)
      ("gemeral" "general" nil 0)
      ("gerat" "great" nil 0)
      ("gerneral" "general" nil 0)
      ("geting" "getting" nil 0)
      ("gettin" "getting" nil 0)
      ("gievn" "given" nil 0)
      ("giveing" "giving" nil 0)
      ("gloabl" "global" nil 0)
      ("goign" "going" nil 0)
      ("gonig" "going" nil 0)
      ("govenment" "government" nil 0)
      ("goverment" "government" nil 0)
      ("gruop" "group" nil 0)
      ("gruops" "groups" nil 0)
      ("grwo" "grow" nil 0)
      ("guidlines" "guidelines" nil 0)
      ("hadbeen" "had been" nil 0)
      ("hadnt" "hadn't" nil 0)
      ("haev" "have" nil 0)
      ("hapen" "happen" nil 0)
      ("hapened" "happened" nil 0)
      ("hapening" "happening" nil 0)
      ("hapens" "happens" nil 0)
      ("happend" "happened" nil 0)
      ("hasbeen" "has been" nil 0)
      ("hasnt" "hasn't" nil 0)
      ("havebeen" "have been" nil 0)
      ("haveing" "having" nil 0)
      ("haven;t" "haven't" nil 0)
      ("hda" "had" nil 0)
      ("hearign" "hearing" nil 0)
      ("heire" "he-ire" nil 0)
      ("helpdesk" "help-desk" nil 0)
      ("helpfull" "helpful" nil 0)
      ("herat" "heart" nil 0)
      ("hesaid" "he said" nil 0)
      ("hewas" "he was" nil 0)
      ("hge" "he" nil 0)
      ("hier" "heir" nil 0)
      ("hismelf" "himself" nil 0)
      ("hiten" "hitting" nil 0)
      ("hitten" "hitting" nil 0)
      ("hlep" "help" nil 0)
      ("howerver" "however" nil 0)
      ("hsa" "has" nil 0)
      ("hsi" "his" nil 0)
      ("hte" "the" nil 0)
      ("htere" "there" nil 0)
      ("htese" "these" nil 0)
      ("htey" "they" nil 0)
      ("hting" "thing" nil 0)
      ("htink" "think" nil 0)
      ("htis" "this" nil 0)
      ("htp:" "http:" nil 0)
      ("http:\\\\" "http:// class="string">" nil 0)
      ("httpL" "http: class="string">" nil 0)
      ("hvae" "have" nil 0)
      ("hvaing" "having" nil 0)
      ("hwich" "which" nil 0)
      ("i" "I" nil 0)
      ("idae" "idea" nil 0)
      ("idaes" "ideas" nil 0)
      ("identifiy" "identify" nil 0)
      ("identofy" "identify" nil 0)
      ("ihs" "his" nil 0)
      ("imediate" "immediate" nil 0)
      ("imediatly" "immediately" nil 0)
      ("immediatly" "immediately" nil 0)
      ("impilies" "implies" nil 0)
      ("implemenation" "implementation" nil 0)
      ("importent" "important" nil 0)
      ("importnat" "important" nil 0)
      ("impossable" "impossible" nil 0)
      ("improvemnt" "improvement" nil 0)
      ("improvment" "improvement" nil 0)
      ("includ" "include" nil 0)
      ("indecate" "indicate" nil 0)
      ("indenpendence" "independence" nil 0)
      ("indenpendent" "independent" nil 0)
      ("indepedent" "independent" nil 0)
      ("independance" "independence" nil 0)
      ("independant" "independent" nil 0)
      ("influance" "influence" nil 0)
      ("infomation" "information" nil 0)
      ("informatoin" "information" nil 0)
      ("inital" "initial" nil 0)
      ("initalization" "initialization" nil 0)
      ("instaleld" "installed" nil 0)
      ("insted" "instead" nil 0)
      ("insurence" "insurance" nil 0)
      ("inteh" "in the" nil 0)
      ("interum" "interim" nil 0)
      ("inthe" "in the" nil 0)
      ("inturn" "in turn" nil 0)
      ("invitaion" "invitation" nil 0)
      ("invstigated" "investigated" nil 0)
      ("inwhich" "in which" nil 0)
      ("isnt" "isn't" nil 0)
      ("isthe" "is the" nil 0)
      ("itis" "it is" nil 0)
      ("ititial" "initial" nil 0)
      ("itll" "it'll" nil 0)
      ("itnerest" "interest" nil 0)
      ("itnerested" "interested" nil 0)
      ("itneresting" "interesting" nil 0)
      ("itnerests" "interests" nil 0)
      ("itwas" "it was" nil 0)
      ("ivestigative" "investigative" nil 0)
      ("iwll" "will" nil 0)
      ("iwth" "with" nil 0)
      ("jsut" "just" nil 0)
      ("jugment" "judgment" nil 0)
      ("knowldge" "knowledge" nil 0)
      ("knowlege" "knowledge" nil 0)
      ("knwo" "know" nil 0)
      ("knwon" "known" nil 0)
      ("knwos" "knows" nil 0)
      ("konw" "know" nil 0)
      ("konwn" "known" nil 0)
      ("konws" "knows" nil 0)
      ("labratory" "laboratory" nil 0)
      ("languange" "language" nil 0)
      ("lastyear" "last year" nil 0)
      ("learnign" "learning" nil 0)
      ("lenght" "length" nil 0)
      ("levle" "level" nil 0)
      ("libary" "library" nil 0)
      ("librarry" "library" nil 0)
      ("librery" "library" nil 0)
      ("liek" "like" nil 0)
      ("liekd" "liked" nil 0)
      ("lieutenent" "lieutenant" nil 0)
      ("liev" "live" nil 0)
      ("likly" "likely" nil 0)
      ("lisense" "license" nil 0)
      ("littel" "little" nil 0)
      ("litttle" "little" nil 0)
      ("liuke" "like" nil 0)
      ("liveing" "living" nil 0)
      ("loev" "love" nil 0)
      ("lonly" "lonely" nil 0)
      ("lookign" "looking" nil 0)
      ("lookup" "look up" nil 0)
      ("maintenence" "maintenance" nil 0)
      ("makeing" "making" nil 0)
      ("managment" "management" nil 0)
      ("mantain" "maintain" nil 0)
      ("marraige" "marriage" nil 0)
      ("memeber" "member" nil 0)
      ("merchent" "merchant" nil 0)
      ("mesage" "message" nil 0)
      ("mesages" "messages" nil 0)
      ("mispell" "misspell" nil 0)
      ("mispelling" "misspelling" nil 0)
      ("mispellings" "misspellings" nil 0)
      ("mkae" "make" nil 0)
      ("mkaes" "makes" nil 0)
      ("mkaing" "making" nil 0)
      ("moeny" "money" nil 0)
      ("morgage" "mortgage" nil 0)
      ("mroe" "more" nil 0)
      ("mysefl" "myself" nil 0)
      ("myu" "my" nil 0)
      ("naive" "naive" nil 0)
      ("necassarily" "necessarily" nil 0)
      ("necassary" "necessary" nil 0)
      ("neccessarily" "necessarily" nil 0)
      ("neccessary" "necessary" nil 0)
      ("necesarily" "necessarily" nil 0)
      ("necesary" "necessary" nil 0)
      ("negotiaing" "negotiating" nil 0)
      ("nkow" "know" nil 0)
      ("nothign" "nothing" nil 0)
      ("nver" "never" nil 0)
      ("nwe" "new" nil 0)
      ("nwo" "now" nil 0)
      ("obediant" "obedient" nil 0)
      ("ocasion" "occasion" nil 0)
      ("occassion" "occasion" nil 0)
      ("occured" "occurred" nil 0)
      ("occurence" "occurrence" nil 0)
      ("occurences" "occurrences" nil 0)
      ("occurrance" "occurrence" nil 0)
      ("ocur" "occur" nil 0)
      ("odbc" "ODBC" nil 0)
      ("oeprator" "operator" nil 0)
      ("ofits" "of its" nil 0)
      ("ofthe" "of the" nil 0)
      ("oging" "going" nil 0)
      ("ohter" "other" nil 0)
      ("omre" "more" nil 0)
      ("oneof" "one of" nil 0)
      ("onepoint" "one point" nil 0)
      ("online" "on-line" nil 0)
      ("ont he" "on the" nil 0)
      ("onthe" "on the" nil 0)
      ("onyl" "only" nil 0)
      ("opcode" "op-code" nil 0)
      ("operaror" "operator" nil 0)
      ("oppasite" "opposite" nil 0)
      ("opperation" "operation" nil 0)
      ("oppertunity" "opportunity" nil 0)
      ("opposate" "opposite" nil 0)
      ("opposible" "opposable" nil 0)
      ("opposit" "opposite" nil 0)
      ("oppotunities" "opportunities" nil 0)
      ("oppotunity" "opportunity" nil 0)
      ("orginization" "organization" nil 0)
      ("orginized" "organized" nil 0)
      ("originial" "original" nil 0)
      ("orignal" "original" nil 0)
      ("otehr" "other" nil 0)
      ("otu" "out" nil 0)
      ("outof" "out of" nil 0)
      ("overthe" "over the" nil 0)
      ("ovverides" "overrides" nil 0)
      ("owrk" "work" nil 0)
      ("owuld" "would" nil 0)
      ("oxident" "oxidant" nil 0)
      ("papaer" "paper" nil 0)
      ("parliment" "parliament" nil 0)
      ("partof" "part of" nil 0)
      ("paticular" "particular" nil 0)
      ("paymetn" "payment" nil 0)
      ("paymetns" "payments" nil 0)
      ("pciture" "picture" nil 0)
      ("peice" "piece" nil 0)
      ("peices" "pieces" nil 0)
      ("peolpe" "people" nil 0)
      ("peopel" "people" nil 0)
      ("percentof" "percent of" nil 0)
      ("percentto" "percent to" nil 0)
      ("performence" "performance" nil 0)
      ("perhasp" "perhaps" nil 0)
      ("perhpas" "perhaps" nil 0)
      ("permanant" "permanent" nil 0)
      ("perminent" "permanent" nil 0)
      ("perscriptions" "prescriptions" nil 0)
      ("personalyl" "personally" nil 0)
      ("pleasent" "pleasant" nil 0)
      ("plugin" "plug-in" nil 0)
      ("poeple" "people" nil 0)
      ("porblem" "problem" nil 0)
      ("porblems" "problems" nil 0)
      ("porvide" "provide" nil 0)
      ("possable" "possible" nil 0)
      ("postition" "position" nil 0)
      ("potentialy" "potentially" nil 0)
      ("prefure" "prefer" nil 0)
      ("pregnent" "pregnant" nil 0)
      ("prelease" "release" nil 0)
      ("prerelease" "pre-release" nil 0)
      ("presance" "presence" nil 0)
      ("privleged" "privileged" nil 0)
      ("probelm" "problem" nil 0)
      ("probelms" "problems" nil 0)
      ("problesm" "problems" nil 0)
      ("proceding" "proceeding" nil 0)
      ("proctetion" "protection" nil 0)
      ("prominant" "prominent" nil 0)
      ("protction" "protection" nil 0)
      ("protoge" "protege" nil 0)
      ("psoition" "position" nil 0)
      ("ptogress" "progress" nil 0)
      ("puting" "putting" nil 0)
      ("pwoer" "power" nil 0)
      ("quater" "quarter" nil 0)
      ("quaters" "quarters" nil 0)
      ("quesion" "question" nil 0)
      ("quesions" "questions" nil 0)
      ("questioms" "questions" nil 0)
      ("questiosn" "questions" nil 0)
      ("questoin" "question" nil 0)
      ("quetion" "question" nil 0)
      ("quetions" "questions" nil 0)
      ("raidus" "RADIUS" nil 0)
      ("realyl" "really" nil 0)
      ("reccomend" "recommend" nil 0)
      ("reccommend" "recommend" nil 0)
      ("receieve" "receive" nil 0)
      ("recieve" "receive" nil 0)
      ("recieved" "received" nil 0)
      ("recieving" "receiving" nil 0)
      ("recomend" "recommend" nil 0)
      ("recomendation" "recommendation" nil 0)
      ("recomendations" "recommendations" nil 0)
      ("recomended" "recommended" nil 0)
      ("recomending" "recommending" nil 0)
      ("reconize" "recognize" nil 0)
      ("recrod" "record" nil 0)
      ("redirector" "re-director" nil 0)
      ("regardsless" "regardless" nil 0)
      ("regession" "regression" nil 0)
      ("regresion" "regression" nil 0)
      ("releated" "related" nil 0)
      ("religous" "religious" nil 0)
      ("relize" "realize" nil 0)
      ("reloacted" "relocated" nil 0)
      ("reltaed" "related" nil 0)
      ("reluctent" "reluctant" nil 0)
      ("remeber" "remember" nil 0)
      ("reommend" "recommend" nil 0)
      ("representativs" "representatives" nil 0)
      ("representives" "representatives" nil 0)
      ("represetned" "represented" nil 0)
      ("represnt" "represent" nil 0)
      ("requirment" "requirement" nil 0)
      ("requirments" "requirements" nil 0)
      ("reserach" "research" nil 0)
      ("resollution" "resolution" nil 0)
      ("resorces" "resources" nil 0)
      ("respomd" "respond" nil 0)
      ("respomse" "response" nil 0)
      ("responce" "response" nil 0)
      ("responsability" "responsibility" nil 0)
      ("responsable" "responsible" nil 0)
      ("responsibile" "responsible" nil 0)
      ("responsiblity" "responsibility" nil 0)
      ("restaraunt" "restaurant" nil 0)
      ("restuarant" "restaurant" nil 0)
      ("reult" "result" nil 0)
      ("reveiw" "review" nil 0)
      ("reveiwing" "reviewing" nil 0)
      ("rumers" "rumors" nil 0)
      ("runnning" "running" nil 0)
      ("rwite" "write" nil 0)
      ("rythm" "rhythm" nil 0)
      ("saidhe" "said he" nil 0)
      ("saidit" "said it" nil 0)
      ("saidthat" "said that" nil 0)
      ("saidthe" "said the" nil 0)
      ("scedule" "schedule" nil 0)
      ("sceduled" "scheduled" nil 0)
      ("scen" "scene" nil 0)
      ("scol" "scowl" nil 0)
      ("scoli" "scowl" nil 0)
      ("seance" "seance" nil 0)
      ("secratary" "secretary" nil 0)
      ("sectino" "section" nil 0)
      ("securtiy" "security" nil 0)
      ("seh" "she" nil 0)
      ("selectoin" "selection" nil 0)
      ("sentance" "sentence" nil 0)
      ("separeate" "separate" nil 0)
      ("seperate" "separate" nil 0)
      ("seperated" "separated" nil 0)
      ("sercumstances" "circumstances" nil 0)
      ("serveral" "several" nil 0)
      ("sez" "says" nil 0)
      ("shcool" "school" nil 0)
      ("shesaid" "she said" nil 0)
      ("shineing" "shining" nil 0)
      ("shiped" "shipped" nil 0)
      ("shoudl" "should" nil 0)
      ("shouldent" "shouldn't" nil 0)
      ("shouldnt" "shouldn't" nil 0)
      ("showinf" "showing" nil 0)
      ("signifacnt" "significant" nil 0)
      ("simalar" "similar" nil 0)
      ("similiar" "similar" nil 0)
      ("simpilified" "simplified" nil 0)
      ("simpyl" "simply" nil 0)
      ("sincerly" "sincerely" nil 0)
      ("sitll" "still" nil 0)
      ("smae" "same" nil 0)
      ("smoe" "some" nil 0)
      ("soem" "some" nil 0)
      ("sohw" "show" nil 0)
      ("soical" "social" nil 0)
      ("somethign" "something" nil 0)
      ("someting" "something" nil 0)
      ("somewaht" "somewhat" nil 0)
      ("somthing" "something" nil 0)
      ("somtimes" "sometimes" nil 0)
      ("soudn" "sound" nil 0)
      ("soudns" "sounds" nil 0)
      ("speach" "speech" nil 0)
      ("specificaly" "specifically" nil 0)
      ("specificalyl" "specifically" nil 0)
      ("statment" "statement" nil 0)
      ("statments" "statements" nil 0)
      ("stnad" "stand" nil 0)
      ("stopry" "story" nil 0)
      ("stoyr" "story" nil 0)
      ("stpo" "stop" nil 0)
      ("strentgh" "strength" nil 0)
      ("stroy" "story" nil 0)
      ("struggel" "struggle" nil 0)
      ("strugle" "struggle" nil 0)
      ("studnet" "student" nil 0)
      ("sublanguange" "sublanguage" nil 0)
      ("substitued" "substituted" nil 0)
      ("successfull" "successful" nil 0)
      ("successfuly" "successfully" nil 0)
      ("successfulyl" "successfully" nil 0)
      ("sucess" "success" nil 0)
      ("sucessfull" "successful" nil 0)
      ("sufficiant" "sufficient" nil 0)
      ("suposed" "supposed" nil 0)
      ("suppossed" "supposed" nil 0)
      ("suprise" "surprise" nil 0)
      ("suprised" "surprised" nil 0)
      ("suprisingly" "surprisingly" nil 0)
      ("swiming" "swimming" nil 0)
      ("tahn" "than" nil 0)
      ("taht" "that" nil 0)
      ("talekd" "talked" nil 0)
      ("talior" "tailor" nil 0)
      ("talkign" "talking" nil 0)
      ("tath" "that" nil 0)
      ("tecnical" "technical" nil 0)
      ("teh" "the" nil 0)
      ("tehy" "they" nil 0)
      ("terminiated" "terminated" nil 0)
      ("termoil" "turmoil" nil 0)
      ("tghe" "the" nil 0)
      ("tghis" "this" nil 0)
      ("thansk" "thanks" nil 0)
      ("thatthe" "that the" nil 0)
      ("thecompany" "the company" nil 0)
      ("thefirst" "the first" nil 0)
      ("thegovernment" "the government" nil 0)
      ("themself" "themselves" nil 0)
      ("themselfs" "themselves" nil 0)
      ("thenew" "the new" nil 0)
      ("theri" "their" nil 0)
      ("thesame" "the same" nil 0)
      ("thetwo" "the two" nil 0)
      ("theyll" "they'll" nil 0)
      ("theyve" "they've" nil 0)
      ("thgat" "that" nil 0)
      ("thge" "the" nil 0)
      ("thier" "their" nil 0)
      ("thier" "their" nil 0)
      ("thigsn" "things" nil 0)
      ("thisyear" "this year" nil 0)
      ("thna" "than" nil 0)
      ("thne" "then" nil 0)
      ("thnig" "thing" nil 0)
      ("thnigs" "things" nil 0)
      ("threatend" "threatened" nil 0)
      ("thsi" "this" nil 0)
      ("thsoe" "those" nil 0)
      ("thta" "that" nil 0)
      ("tihs" "this" nil 0)
      ("timne" "time" nil 0)
      ("tiogether" "together" nil 0)
      ("tje" "the" nil 0)
      ("tjhe" "the" nil 0)
      ("tkae" "take" nil 0)
      ("tkaes" "takes" nil 0)
      ("tkaing" "taking" nil 0)
      ("tlaking" "talking" nil 0)
      ("todya" "today" nil 0)
      ("togehter" "together" nil 0)
      ("tomorow" "tomorrow" nil 0)
      ("tongiht" "tonight" nil 0)
      ("tonihgt" "tonight" nil 0)
      ("totaly" "totally" nil 0)
      ("totalyl" "totally" nil 0)
      ("tothe" "to the" nil 0)
      ("towrad" "toward" nil 0)
      ("traditionalyl" "traditionally" nil 0)
      ("transfered" "transferred" nil 0)
      ("truely" "truly" nil 0)
      ("truley" "truly" nil 0)
      ("tryed" "tried" nil 0)
      ("tthe" "the" nil 0)
      ("tyhat" "that" nil 0)
      ("tyhe" "the" nil 0)
      ("udnerstand" "understand" nil 0)
      ("understnad" "understand" nil 0)
      ("undert he" "under the" nil 0)
      ("unicode" "Unicode" nil 0)
      ("unicode" "Unicode" nil 0)
      ("unitedstates" "United States" nil 0)
      ("unliek" "unlike" nil 0)
      ("unpleasently" "unpleasantly" nil 0)
      ("unregistared" "unregistered" nil 0)
      ("untill" "until" nil 0)
      ("untilll" "until" nil 0)
      ("useing" "using" nil 0)
      ("usualyl" "usually" nil 0)
      ("veyr" "very" nil 0)
      ("virtualyl" "virtually" nil 0)
      ("vrey" "very" nil 0)
      ("vulnerible" "vulnerable" nil 0)
      ("waht" "what" nil 0)
      ("warrent" "warrant" nil 0)
      ("wasnt" "wasn't" nil 0)
      ("watn" "want" nil 0)
      ("wehn" "when" nil 0)
      ("wernt" "weren't" nil 0)
      ("werre" "were" nil 0)
      ("wethee" "whether" nil 0)
      ("whcih" "which" nil 0)
      ("wherre" "where" nil 0)
      ("whic" "which" nil 0)
      ("whihc" "which" nil 0)
      ("whos" "who's" nil 0)
      ("whove" "who've" nil 0)
      ("whta" "what" nil 0)
      ("wief" "wife" nil 0)
      ("wierd" "weird" nil 0)
      ("wihch" "which" nil 0)
      ("wiht" "with" nil 0)
      ("willbe" "will be" nil 0)
      ("windoes" "windows" nil 0)
      ("witha" "with a" nil 0)
      ("withe" "with" nil 0)
      ("withthe" "with the" nil 0)
      ("wiull" "will" nil 0)
      ("wnat" "want" nil 0)
      ("wnated" "wanted" nil 0)
      ("wnats" "wants" nil 0)
      ("woh" "who" nil 0)
      ("wohle" "whole" nil 0)
      ("wokr" "work" nil 0)
      ("woudl" "would" nil 0)
      ("woudln" "wouldn" nil 0)
      ("wouldbe" "would be" nil 0)
      ("wouldnt" "wouldn't" nil 0)
      ("wriet" "write" nil 0)
      ("writting" "writing" nil 0)
      ("wrod" "word" nil 0)
      ("wroet" "wrote" nil 0)
      ("wroking" "working" nil 0)
      ("wtih" "with" nil 0)
      ("wuould" "would" nil 0)
      ("wya" "way" nil 0)
      ("yera" "year" nil 0)
      ("yeras" "years" nil 0)
      ("yersa" "years" nil 0)
      ("yoiu" "you" nil 0)
      ("youare" "you are" nil 0)
      ("youd" "you'd" nil 0)
      ("youre" "you're" nil 0)
      ("youve" "you've" nil 0)
      ("ytou" "you" nil 0)
      ("yuo" "you" nil 0)
      ("yuor" "your" nil 0)
      ))
#+end_src

Idea borrowed from [[http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html][here]].

1. Hit =C-x C-i=, instead of erasing the mistake;
2. Select the appropriate correction (thanks to ispell); Sleep easier
   at night knowing I'll never see that mistake again (thanks to
   abbrev).


#+begin_src emacs-lisp :tangle yes
  (define-key ctl-x-map "\C-i" 'endless/ispell-word-then-abbrev)

  (defun endless/ispell-word-then-abbrev (p)
    "Call `ispell-word'. Then create an abbrev for the correction made.
  With prefix P, create local abbrev. Otherwise it will be global."
    (interactive "P")
    (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
      (call-interactively 'ispell-word)
      (setq aft (downcase (or (thing-at-point 'word) "")))
      (unless (string= aft bef)
        (message "\"%s\" now expands to \"%s\" %sally"
                 bef aft (if p "loc" "glob"))
        (define-abbrev
          (if p global-abbrev-table local-abbrev-table)
          bef aft))))
#+end_src

*** The Toggle-map

#+begin_src emacs-lisp :tangle yes
  (define-prefix-command 'endless/toggle-map)
  ;; The manual recommends C-c for user keys, but C-x t is
  ;; always free, whereas C-c t is used by some modes.
  (define-key ctl-x-map "t" 'endless/toggle-map)
  (define-key endless/toggle-map "d" 'toggle-debug-on-error)
  (define-key endless/toggle-map "e" 'toggle-debug-on-error)
  (define-key endless/toggle-map "f" 'auto-fill-mode)
  (define-key endless/toggle-map "q" 'toggle-debug-on-quit)
#+end_src

